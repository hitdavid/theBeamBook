[[CH-Processes]]
== 进程

轻量级进程的概念是 Erlang 和 BEAM 的本质；它使 BEAM 从其他虚拟机中脱颖而出。为了理解 BEAM (以及 Erlang 和 Elixir )是如何工作的，您需要了解进程是如何工作的细节，这将帮助您理解 BEAM 的核心概念，包括对进程来说什么是容易且低成本的，什么是困难且昂贵的。

BEAM 中的几乎所有内容都与进程的概念有关，在本章中，我们将进一步了解这些关系。我们将对 xref:introduction[] 部分的内容进行扩展，并更深入地了解一些概念，如内存管理、消息传递，特别是调度。

Erlang 进程与操作系统进程非常相似。它有自己的地址空间，它可以通过信号和消息与其他进程通信，并且执行是由抢占式调度程序控制的。

当你的 Erlang 或 Elixir 系统中出现性能问题时，这个问题通常是由特定进程中的问题或进程之间的不平衡引起的。当然还有其他常见的问题，如糟糕的算法或内存问题，这些内容将在其他章节中涉及到。能够查明导致问题的进程始终是重要的，因此我们将研究 Erlang 运行时系统中用于进程检查的可用工具。

我们将在本章中介绍这些工具，通过它们了解进程和调度器是如何工作的，然后我们将把所有工具放在一起作为最后的练习。

=== 什么是进程？

进程是相互隔离的实体，代码的执行就发生在其中。进程通过隔离错误对执行有缺陷代码的进程的影响，来保护系统不受代码中的错误影响。

运行时提供了许多检查进程的工具，帮助我们发现瓶颈、问题和资源的过度使用。这些工具将帮助您识别和检查有问题的进程。

==== 从终端获得进程列表

让我们来看看在运行的系统中有哪些进程。最简单的方法是启动一个 Erlang 终端并发出 shell 命令 ` i() ` 。在 Elixir 中，您可以像  `:shell_default.i` 这样来调用 ` shell_default ` 模块中的 `i/0` 函数。

[source,bash]
----
$ erl
Erlang/OTP 19 [erts-8.1] [source] [64-bit] [smp:4:4] [async-threads:10]
              [hipe] [kernel-poll:false]

Eshell V8.1  (abort with ^G)
1> i().
Pid                   Initial Call                     Heap     Reds Msgs
Registered            Current Function                 Stack              
<0.0.0>               otp_ring0:start/2                 376      579    0
init                  init:loop/1                         2              
<0.1.0>               erts_code_purger:start/0          233        4    0
erts_code_purger      erts_code_purger:loop/0             3              
<0.4.0>               erlang:apply/2                    987   100084    0
erl_prim_loader       erl_prim_loader:loop/3              5              
<0.30.0>              gen_event:init_it/6               610      226    0
error_logger          gen_event:fetch_msg/5               8              
<0.31.0>              erlang:apply/2                   1598      416    0
application_controlle gen_server:loop/6                   7              
<0.33.0>              application_master:init/4         233       64    0
                      application_master:main_loop/2      6              
<0.34.0>              application_master:start_it/4     233       59    0
                      application_master:loop_it/4        5              
<0.35.0>              supervisor:kernel/1               610     1767    0
kernel_sup            gen_server:loop/6                   9              
<0.36.0>              erlang:apply/2                   6772    73914    0
code_server           code_server:loop/1                  3              
<0.38.0>              rpc:init/1                        233       21    0
rex                   gen_server:loop/6                   9              
<0.39.0>              global:init/1                     233       44    0
global_name_server    gen_server:loop/6                   9              
<0.40.0>              erlang:apply/2                    233       21    0
                      global:loop_the_locker/1            5              
<0.41.0>              erlang:apply/2                    233        3    0
                      global:loop_the_registrar/0         2              
<0.42.0>              inet_db:init/1                    233      209    0
inet_db               gen_server:loop/6                   9              
<0.44.0>              global_group:init/1               233       55    0
global_group          gen_server:loop/6                   9              
<0.45.0>              file_server:init/1                233       79    0
file_server_2         gen_server:loop/6                   9              
<0.46.0>              supervisor_bridge:standard_error/ 233       34    0
standard_error_sup    gen_server:loop/6                   9              
<0.47.0>              erlang:apply/2                    233       10    0
standard_error        standard_error:server_loop/1        2              
<0.48.0>              supervisor_bridge:user_sup/1      233       54    0
                      gen_server:loop/6                   9              
<0.49.0>              user_drv:server/2                 987     1975    0
user_drv              user_drv:server_loop/6              9              
<0.50.0>              group:server/3                    233       40    0
user                  group:server_loop/3                 4              
<0.51.0>              group:server/3                    987    12508    0
                      group:server_loop/3                 4              
<0.52.0>              erlang:apply/2                   4185     9537    0
                      shell:shell_rep/4                  17              
<0.53.0>              kernel_config:init/1              233      255    0
                      gen_server:loop/6                   9              
<0.54.0>              supervisor:kernel/1               233       56    0
kernel_safe_sup       gen_server:loop/6                   9              
<0.58.0>              erlang:apply/2                   2586    18849    0
                      c:pinfo/1                          50              
Total                                                 23426   220863    0
                                                        222              
ok


----



`i/0` 函数输出系统中所有进程的列表。其中每个进程的信息输出2行。整个输出的前两行是标题区域，说明输出信息的含义。可以看到，您获得了进程 ID (Pid) 和进程名称(如果有的话)，以及关于进程的入口函数和正在执行的函数代码的信息。您还可以获得关于堆和栈的大小，以及进程的规约值（reductions，译注，一个调度相关的计数，将在后边详述）和消息的数量信息。在本章的其余部分，我们将详细了解什么是栈、堆、规约值和消息。现在我们可以假设，如果堆大小的值很大，那么说明进程使用了很多内存，而如果规约值很大，说明进程就执行了很多代码。

我们可以用 `i/3` 函数进一步检查进程。让我们看一下 `code_server` 进程。我们可以在前面的列表中看到， `code_server` 的进程标识符 ( pid ) 是 `<0.36.0>`。通过 pid 的三个数字调用 `i/3` ，我们得到以下信息:

[source,erlang]
----
2> i(0,36,0).
[{registered_name,code_server},
 {current_function,{code_server,loop,1}},
 {initial_call,{erlang,apply,2}},
 {status,waiting},
 {message_queue_len,0},
 {messages,[]},
 {links,[<0.35.0>]},
 {dictionary,[]},
 {trap_exit,true},
 {error_handler,error_handler},
 {priority,normal},
 {group_leader,<0.33.0>},
 {total_heap_size,46422},
 {heap_size,46422},
 {stack_size,3},
 {reductions,93418},
 {garbage_collection,[{max_heap_size,#{error_logger => true,
                                       kill => true,
                                       size => 0}},
                      {min_bin_vheap_size,46422},
                      {min_heap_size,233},
                      {fullsweep_after,65535},
                      {minor_gcs,0}]},
 {suspending,[]}]
3>
----

我们从这个调用中得到了很多信息，在本章的其余部分，我们将详细了解这些信息的含义。
第一行告诉我们，进程被命名为`code_server`。接下来，在 `current_function` 中我们可以看到进程当前正在执行或挂起的函数，在 `initial_call` 中，可以看到进程开始执行的入口函数名称。

我们还可以看到，当前进程被挂起等待消息( `{status,waiting}` )，并且在没有消息在邮箱中 (`{message_queue_len,0}`, `{messages,[]}`)。在本章的后面，我们将进一步了解消息传递的工作原理。

字段 `priority`, `suspending`, `reductions`, `links`, `trap_exit`, `error_handler`，和 `group_leader` 控制进程执行、错误处理和 IO。在介绍 _Observer_ 时，我们将对此进行更深入的研究。

最后几个字段 (`dictionary`, `total_heap_size`, `heap_size`, `stack_size`，和 `garbage_collection`) 提供了进程内存使用情况的信息。我们将在 xref:CH-Memory[] 章节中详细讨论进程内存区域。

另一种获取进程信息的更直接的方法是使用 `BREAK` 菜单: `ctrl+c p [enter]` 提供的进程信息。注意，当处于 `BREAK` 状态时，整个节点都会冻结。

==== 程序化的进程探查

shell 函数只打印有关进程的信息，但实际上这些信息可以作为数据形式获取到，因此您可以编写自己的工具来检查进程。您可以通过`erlang:processes/0` 获得所有进程的列表，并通过 `erlang:process_info/1` 获得某个进程的更多信息。我们也可以使用函数 `whereis/1` 来用进程名获得它的pid:

[source,erlang]
----

1> Ps = erlang:processes().
[<0.0.0>,<0.1.0>,<0.4.0>,<0.30.0>,<0.31.0>,<0.33.0>,
 <0.34.0>,<0.35.0>,<0.36.0>,<0.38.0>,<0.39.0>,<0.40.0>,
 <0.41.0>,<0.42.0>,<0.44.0>,<0.45.0>,<0.46.0>,<0.47.0>,
 <0.48.0>,<0.49.0>,<0.50.0>,<0.51.0>,<0.52.0>,<0.53.0>,
 <0.54.0>,<0.60.0>]
2> CodeServerPid = whereis(code_server).
<0.36.0>
3> erlang:process_info(CodeServerPid).
[{registered_name,code_server},
 {current_function,{code_server,loop,1}},
 {initial_call,{erlang,apply,2}},
 {status,waiting},
 {message_queue_len,0},
 {messages,[]},
 {links,[<0.35.0>]},
 {dictionary,[]},
 {trap_exit,true},
 {error_handler,error_handler},
 {priority,normal},
 {group_leader,<0.33.0>},
 {total_heap_size,24503},
 {heap_size,6772},
 {stack_size,3},
 {reductions,74260},
 {garbage_collection,[{max_heap_size,#{error_logger => true,
                                       kill => true,
                                       size => 0}},
                      {min_bin_vheap_size,46422},
                      {min_heap_size,233},
                      {fullsweep_after,65535},
                      {minor_gcs,33}]},
 {suspending,[]}]
----

以数据方式获取进程信息后，我们可以按自己的意愿编写代码来分析或排序数据。如果我们 (使用 `erlang:processes/0`) 抓取系统中的所有进程，然后 (使用 `erlang:process_info(P,total_heap_size)`) 获取每个进程的堆大小信息，我们就可以构造一个包含 pid 和堆大小的列表，并根据堆大小对其排序：

[source,erlang]
----
1> lists:reverse(lists:keysort(2,[{P,element(2,
    erlang:process_info(P,total_heap_size))}
    || P <- erlang:processes()])).
[{<0.36.0>,24503},
 {<0.52.0>,21916},
 {<0.4.0>,12556},
 {<0.58.0>,4184},
 {<0.51.0>,4184},
 {<0.31.0>,3196},
 {<0.49.0>,2586},
 {<0.35.0>,1597},
 {<0.30.0>,986},
 {<0.0.0>,752},
 {<0.33.0>,609},
 {<0.54.0>,233},
 {<0.53.0>,233},
 {<0.50.0>,233},
 {<0.48.0>,233},
 {<0.47.0>,233},
 {<0.46.0>,233},
 {<0.45.0>,233},
 {<0.44.0>,233},
 {<0.42.0>,233},
 {<0.41.0>,233},
 {<0.40.0>,233},
 {<0.39.0>,233},
 {<0.38.0>,233},
 {<0.34.0>,233},
 {<0.1.0>,233}]

2>
----

您可能会注意到，许多进程的堆大小为233，这是因为它是进程默认的起始堆大小。

请参阅模块 `erlang` 的文档 link:http://erlang.org/doc/man/erlang.html#process_info-1[`process_info`]，以获得信息的完整描述。
请注意， `process_info/1` 函数只返回进程可用的所有信息的子集，以及`process_info/2` 函数用于获取额外信息。例如，要提取上面 `code_server` 进程的 `backtrace` ，我们可以运行：

[source,erlang]
----
3> process_info(whereis(code_server), backtrace).
{backtrace,<<"Program counter: 0x00000000161de900 (code_server:loop/1 + 152)\nCP: 0x0000000000000000 (invalid)\narity = 0\n\n0"...>>}
----

看到上面信息末端的三个点了吗？这意味着输出被截断了。查看整个值的一个有用的技巧是使用 `rp/1` 函数包装上面的函数调用：

[source,erlang]
----
4> rp(process_info(whereis(code_server), backtrace)).
----

另一种方法是使用 `io:put_chars/1` 函数，如下所示：

[source,erlang]
----
5> {backtrace, Backtrace} = process_info(whereis(code_server), backtrace).
{backtrace,<<"Program counter: 0x00000000161de900 (code_server:loop/1 + 152)\nCP: 0x0000000000000000 (invalid)\narity = 0\n\n0"...>>}
6> io:put_chars(Backtrace).
----

由于其冗长，这里没有包含命令 `4>` 和 `6>` 的输出，请在 Erlang shell 中尝试以上命令。

==== 使用 Observer 检查进程

第三种检查进程的方法是使用 link:http://erlang.org/doc/apps/observer/observer_ug.html[_Observer_]。_Observer_ 是一个用于检查 Erlang 运行时系统的扩展图形界面。在本书中，我们将使用观察者来检查系统的不同方面。

观察者可以从操作系统终端启动并连接到 Erlang 节点，也可以直接从 Elixir 或 Erlang shell 启动。现在我们在 Elixir shell 中使用 `:observer.start` 来启动观察者。或者在 Erlang shell 中使用：

[source,erlang]
----
7> observer:start().
----

当 Observer 启动时，它会显示一个系统概览，如下截图:

image::../images/observer_system.png[]

我们将在本章和下一章中详细讨论这些信息。现在我们只用Observer来观察正在运行中的进程。首先我们看一下 `Applications` 标签，它显示了运行系统的监督树：

image::../images/observer_applications.png[]

在这里，我们得到了流程如何链接的图形视图。这是一种用来了解系统被如何构建的好方法。您还会很好的感觉到，进程就像漂浮在空间中的孤立实体通过链接相互连接。

为了得到一些关于进程的有用信息，我们切换到 `Processes` 选项卡:

image::../images/observer_processes.png[]

在这个视图中，我们得到了与 shell 中的 `i/0` 基本相同的信息。我们可以看到 pid、注册名称、规约值数量、内存使用量、消息数量和当前函数。

我们也可以通过双击某行的行来查看进程（例如 code server），以获得通过 `process_info/2` 可以获得的信息：

image::../images/observer_code_server.png[]

我们现在不讨论所有这些信息的意义，但如果你继续阅读，所有的信息最终都会被揭示。

.开启 Observer
****
如果您正在使用 erlang.mk 或 rebar 构建应用程序，当你想在构建中包含 Observer 应用，你可能需要在 yourapp.app.src 中的应用清单中添加 `runtime_tools`, `wx`, 和 `observer` 。

****

既然我们已经基本了解了什么是进程，以及一些用于查找和检查系统中进程的工具，那么我们就可以深入了解进程是如何实现的了。

=== 进程就是内存

一个进程基本上是四个内存块：一个_stack_，一个_heap_，一个_message区域，和一个进程控制块_ (_PCB_)。


栈用于通过存储返回地址来跟踪程序执行情况、向函数传递参数，以及保存本地变量。更大的结构，如列表和元组被存储在堆中。

_Message area_，也称为信箱 ( _mailbox_ ) ，用于存储从其他进程发送给自身进程的消息。进程控制块用于跟踪进程的状态。

如图，以内存视角查看进程：

[[erlang_process_memory_1]]
.Erlang Process Memory : Basic

[ditaa]
----
  +-------+  +-------+
  |  PCB  |  | Stack |
  +-------+  +-------+

  +-------+  +-------+
  | M-box |  | Heap  |
  +-------+  +-------+


----

这幅关于进程的图已经非常简化，我们将对更精细的版本进行多次迭代，以得到更精确的图。

栈、堆和邮箱内存都是动态分配的，可以根据需要扩容或缩容。我们将在后面的章节中看到它是如何工作的。另一方面，PCB 是静态分配的，并且包含许多控制进程的字段。

实际上，我们可以通过使用 _HiPE's Built In Functions_ (HiPE BIFs) 中的自省来检查其中一些内存区域。有了这些 BIFs，我们可以打印出栈、堆和 PCB 的内存中的内容。原始数据会被打印出来，在大多数情况下，人类可读的版本会与数据一起打印出来。要真正了解检查内存时我们所看到的一切，我们需要知道更多关于 Erlang 标签方案 （将在 xref:CH-TypeSystem[] 中介绍）、执行模型和错误处理（将在 xref:CH-BEAM[] 中介绍），但是使用这些工具将给我们一个很好的视图来说明，进程其实就是内存。

.HiPE 内建函数 (HiPE BIFs)
****
HiPE BIFs不是Erlang/OTP的正式部分。他不由OTP团队提供支持。它们可能在任何时候被移除或改变，所以不要把你的关键任务服务建立在它们之上。
这些 BIFs 以一种可能不安全的方式检查 ERTS 的内部。用于自省的 BIFs 通常只是打印到标准输出，你可能会对输出的结果感到惊讶。
这些 BIFs 可以长时间锁定调度程序线程而不使用任何规约值  (我们将在下一章中看到这意味着什么)。例如，打印一个非常大的进程的堆会花费很长时间。
这些 BIFs 仅用于调试，使用它们的风险自负。你不应该在服务中的系统上运行它们。
199x 年代中期 (64位 Erlang 诞生之前)，作者写的许多HiPE BIFs 和打印输出，在64位机器上可能有点过时了。有新版本的 BIFs 已经能更好的工作了，希望本书付印时他们能被纳入 ERTS。如果还没有的话，您可以使用代码部分提供的补丁和 xref:AP-BuildingERTS[] 中的说明构建自己的版本。

****

使用 `hipe_bifs:show_estack/1` 我们可以看到进程栈的上下文：

[source,erlang]
----
1> hipe_bifs:show_estack(self()).
 |                BEAM  STACK              |
 |            Address |           Contents |
 |--------------------|--------------------| BEAM ACTIVATION RECORD
 | 0x00007f9cc3238310 | 0x00007f9cc2ea6fe8 | BEAM PC shell:exprs/7 + 0x4e
 | 0x00007f9cc3238318 | 0xfffffffffffffffb | []
 | 0x00007f9cc3238320 | 0x000000000000644b | none
 |--------------------|--------------------| BEAM ACTIVATION RECORD
 | 0x00007f9cc3238328 | 0x00007f9cc2ea6708 | BEAM PC shell:eval_exprs/7 + 0xf
 | 0x00007f9cc3238330 | 0xfffffffffffffffb | []
 | 0x00007f9cc3238338 | 0xfffffffffffffffb | []
 | 0x00007f9cc3238340 | 0x000000000004f3cb | cmd
 | 0x00007f9cc3238348 | 0xfffffffffffffffb | []
 | 0x00007f9cc3238350 | 0x00007f9cc3237102 | {value,#Fun<shell.5.104321512>}
 | 0x00007f9cc3238358 | 0x00007f9cc323711a | {eval,#Fun<shell.21.104321512>}
 | 0x00007f9cc3238360 | 0x00000000000200ff | 8207
 | 0x00007f9cc3238368 | 0xfffffffffffffffb | []
 | 0x00007f9cc3238370 | 0xfffffffffffffffb | []
 | 0x00007f9cc3238378 | 0xfffffffffffffffb | []
 |--------------------|--------------------| BEAM ACTIVATION RECORD
 | 0x00007f9cc3238380 | 0x00007f9cc2ea6300 | BEAM PC shell:eval_loop/3 + 0x47
 | 0x00007f9cc3238388 | 0xfffffffffffffffb | []
 | 0x00007f9cc3238390 | 0xfffffffffffffffb | []
 | 0x00007f9cc3238398 | 0xfffffffffffffffb | []
 | 0x00007f9cc32383a0 | 0xfffffffffffffffb | []
 | 0x00007f9cc32383a8 | 0x000001a000000343 | <0.52.0>
 |....................|....................| BEAM CATCH FRAME
 | 0x00007f9cc32383b0 | 0x0000000000005a9b | CATCH 0x00007f9cc2ea67d8
 |                    |                    |  (BEAM shell:eval_exprs/7 + 0x29)
 |********************|********************|
 |--------------------|--------------------| BEAM ACTIVATION RECORD
 | 0x00007f9cc32383b8 | 0x000000000093aeb8 | BEAM PC normal-process-exit
 | 0x00007f9cc32383c0 | 0x00000000000200ff | 8207
 | 0x00007f9cc32383c8 | 0x000001a000000343 | <0.52.0>
 |--------------------|--------------------|
true
2>
----

我们将 xref:CH-TypeSystem[] 中进一步研究的栈和堆中的值。堆的内容由 `hipe_bifs:show_heap/1` 打印。我们不想在这里列出一个大的堆，所以我们将生成一个不做任何事情的新进程并显示它的堆：

[source,erlang]
----
2> hipe_bifs:show_heap(spawn(fun () -> ok end)).
From: 0x00007f7f33ec9588 to 0x00007f7f33ec9848
 |                 H E A P                 |
 |            Address |           Contents |
 |--------------------|--------------------|
 | 0x00007f7f33ec9588 | 0x00007f7f33ec959a | #Fun<erl_eval.20.52032458>
 | 0x00007f7f33ec9590 | 0x00007f7f33ec9839 | [[]]            
 | 0x00007f7f33ec9598 | 0x0000000000000154 | Thing Arity(5) Tag(20)
 | 0x00007f7f33ec95a0 | 0x00007f7f3d3833d0 | THING
 | 0x00007f7f33ec95a8 | 0x0000000000000000 | THING
 | 0x00007f7f33ec95b0 | 0x0000000000600324 | THING
 | 0x00007f7f33ec95b8 | 0x0000000000000000 | THING
 | 0x00007f7f33ec95c0 | 0x0000000000000001 | THING
 | 0x00007f7f33ec95c8 | 0x000001d0000003a3 | <0.58.0>        
 | 0x00007f7f33ec95d0 | 0x00007f7f33ec95da | {[],{eval...    
 | 0x00007f7f33ec95d8 | 0x0000000000000100 | Arity(4)
 | 0x00007f7f33ec95e0 | 0xfffffffffffffffb | []              
 | 0x00007f7f33ec95e8 | 0x00007f7f33ec9602 | {eval,#Fun<shell.21.104321512>}
 | 0x00007f7f33ec95f0 | 0x00007f7f33ec961a | {value,#Fun<shell.5.104321512>}... 
 | 0x00007f7f33ec95f8 | 0x00007f7f33ec9631 | [{clause...     

 ...

 | 0x00007f7f33ec97d0 | 0x00007f7f33ec97fa | #Fun<shell.5.104321512>
 | 0x00007f7f33ec97d8 | 0x00000000000000c0 | Arity(3)
 | 0x00007f7f33ec97e0 | 0x0000000000000e4b | atom            
 | 0x00007f7f33ec97e8 | 0x000000000000001f | 1               
 | 0x00007f7f33ec97f0 | 0x0000000000006d0b | ok              
 | 0x00007f7f33ec97f8 | 0x0000000000000154 | Thing Arity(5) Tag(20)
 | 0x00007f7f33ec9800 | 0x00007f7f33bde0c8 | THING
 | 0x00007f7f33ec9808 | 0x00007f7f33ec9780 | THING
 | 0x00007f7f33ec9810 | 0x000000000060030c | THING
 | 0x00007f7f33ec9818 | 0x0000000000000002 | THING
 | 0x00007f7f33ec9820 | 0x0000000000000001 | THING
 | 0x00007f7f33ec9828 | 0x000001d0000003a3 | <0.58.0>        
 | 0x00007f7f33ec9830 | 0x000001a000000343 | <0.52.0>        
 | 0x00007f7f33ec9838 | 0xfffffffffffffffb | []              
 | 0x00007f7f33ec9840 | 0xfffffffffffffffb | []              
 |--------------------|--------------------|
true
3> 

----

我们也可以通过 `hipe_bifs:show_pcb/1` 来打印 PCB 中的字段：

[source,erlang]
----
3> hipe_bifs:show_pcb(self()).                                            
 P: 0x00007f7f3cbc0400
 ---------------------------------------------------------------
 Offset| Name        | Value              | *Value             |
     0 | id          | 0x000001d0000003a3 |                    |
    72 | htop        | 0x00007f7f33f15298 |                    |
    96 | hend        | 0x00007f7f33f16540 |                    |
    88 | heap        | 0x00007f7f33f11470 |                    |
   104 | heap_sz     | 0x0000000000000a1a |                    |
    80 | stop        | 0x00007f7f33f16480 |                    |
   592 | gen_gcs     | 0x0000000000000012 |                    |
   594 | max_gen_gcs | 0x000000000000ffff |                    |
   552 | high_water  | 0x00007f7f33f11c50 |                    |
   560 | old_hend    | 0x00007f7f33e90648 |                    |
   568 | old_htop    | 0x00007f7f33e8f8e8 |                    |
   576 | old_head    | 0x00007f7f33e8e770 |                    |
   112 | min_heap_.. | 0x00000000000000e9 |                    |
   328 | rcount      | 0x0000000000000000 |                    |
   336 | reds        | 0x0000000000002270 |                    |
    16 | tracer      | 0xfffffffffffffffb |                    |
    24 | trace_fla.. | 0x0000000000000000 |                    |
   344 | group_lea.. | 0x0000019800000333 |                    |
   352 | flags       | 0x0000000000002000 |                    |
   360 | fvalue      | 0xfffffffffffffffb |                    |
   368 | freason     | 0x0000000000000000 |                    |
   320 | fcalls      | 0x00000000000005a2 |                    |
   384 | next        | 0x0000000000000000 |                    |
    48 | reg         | 0x0000000000000000 |                    |
    56 | nlinks      | 0x00007f7f3cbc0750 |                    |
   616 | mbuf        | 0x0000000000000000 |                    |
   640 | mbuf_sz     | 0x0000000000000000 |                    |
   464 | dictionary  | 0x0000000000000000 |                    |
   472 | seq..clock  | 0x0000000000000000 |                    |
   480 | seq..astcnt | 0x0000000000000000 |                    |
   488 | seq..token  | 0xfffffffffffffffb |                    |
   496 | intial[0]   | 0x000000000000320b |                    |
   504 | intial[1]   | 0x0000000000000c8b |                    |
   512 | intial[2]   | 0x0000000000000002 |                    |
   520 | current     | 0x00007f7f3be87c20 | 0x000000000000ed8b |
   296 | cp          | 0x00007f7f3d3a5100 | 0x0000000000440848 |
   304 | i           | 0x00007f7f3be87c38 | 0x000000000044353a |
   312 | catches     | 0x0000000000000001 |                    |
   224 | arity       | 0x0000000000000000 |                    |
   232 | arg_reg     | 0x00007f7f3cbc04f8 | 0x000000000000320b |
   240 | max_arg_reg | 0x0000000000000006 |                    |
   248 | def..reg[0] | 0x000000000000320b |                    |
   256 | def..reg[1] | 0x0000000000000c8b |                    |
   264 | def..reg[2] | 0x00007f7f33ec9589 |                    |
   272 | def..reg[3] | 0x0000000000000000 |                    |
   280 | def..reg[4] | 0x0000000000000000 |                    |
   288 | def..reg[5] | 0x00000000000007d0 |                    |
   136 | nsp         | 0x0000000000000000 |                    |
   144 | nstack      | 0x0000000000000000 |                    |
   152 | nstend      | 0x0000000000000000 |                    |
   160 | ncallee     | 0x0000000000000000 |                    |
    56 | ncsp        | 0x0000000000000000 |                    |
    64 | narity      | 0x0000000000000000 |                    |
 ---------------------------------------------------------------

true
4>
----

现在有了这些检查工具的支持，我们准备看看这些领域的PCB意味着什么。

=== 进程控制块（PCB）

进程控制块包含控制进程行为和当前状态的所有字段。在本节和本章的其余部分，我们将介绍最重要的字段。我们将在本章中省略与执行和跟踪有关的一些字段，而在 xref:CH-BEAM[] 中讨论那些字段。

如果你想比我们在本章中介绍的内容了解的更深入，你可以看看PCB 的 C 源代码。PCB在文件 link: https://github.com/erlang/otp/blob/OTP-19.3/erts/emulator/beam/erl_process.h[' erl_process.h '] 中被实现为一个名为 `process` 的 C 结构体。

 `id` 包含进程的 ID (或 PID)。

----
    0 | id          | 0x000001d0000003a3 |                    |
----

进程 ID 是一个 Erlang 项式，因此会有 tag (参见 xref:CH-TypeSystem[] )。这意味着4个最低有效位是一个标签 (tag, 0011)。在代码部分，有一个检查 Erlang 项式的模块(请参阅 xref:listing-show[show.erl] )，我们将在关于类型的一章中介绍它。不过，我们现在可以使用它来检查加了标签的项式的类型。

[source,erlang]
----
4> show:tag_to_type(16#0000001d0000003a3).
pid
5>
----

字段 `htop` 和 `stop` 分别是指向堆和栈顶部的指针，也就是说，它们指向堆或栈的下一个空闲槽。字段 `heap` (start) 和 `hend` 指向整个堆的开始和结束， `heap_sz` 用单词表示堆的大小。在64位机器上 `hend - heap = heap_sz * 8` ，在32位机器上 `hend - heap = heap_sz * 4` 。

字段 `min_heap_size` 是堆开始时的大小，它不会缩小到小于这个值，默认值是 233。

我们现在可以用 PCB 控制堆的形状的字段来精炼进程堆的图片：

[[erlang_process_heap]]
.Erlang Process Heap

[ditaa]
----

  hend ->  +----+    -
           |    |    ^
           |    |    |             -
  htop ->  |    |    | heap_sz*8   ^
           |....|    | hend-heap   | min_heap_size
           |....|    v             v
  heap ->  +----+    -             -
          The Heap


----

但是，等一下，为什么我们有堆开始和堆结束，但没有栈的开始和结束呢？这是因为 BEAM 使用了一种通过同时分配堆和堆栈来节省空间和指针的技巧。现在，我们第一次修正脑海里进程的内存图像。堆和栈实际上在同一个内存区域：

[[erlang_process_memory_2]]
.Erlang Process Memory : Heap + Stack
[ditaa, separation=false]
----
 +-------+  +-------+
 |  PCB  |  | Stack |
 +-------+  +-------+
            | free  |
 +-------+  +-------+
 | M-box |  | Heap  |
 +-------+  +-------+


----

栈向低内存地址增长，堆向高内存地址增长，所以我们也可以通过添加栈顶指针来优化堆的图片：

[[erlang_process_heap_and_stack]]
.Erlang Process Heap and Stack

[ditaa]
----
  hend ->  +----+    -
           |....|    ^
  stop ->  |    |    |
           |    |    |
           |    |    |             -
  htop ->  |    |    | heap_sz     ^
           |....|    |             | min_heap_size
           |....|    v             v
  heap ->  +----+    -             -
          The Heap


----

当指针 `htop` 和 `stop` 相遇，进程将耗尽空闲内存，必须进行垃圾收集来释放内存。

=== 垃圾收集器 (GC)

Erlang 使用每个进程复制分代垃圾收集器来管理堆内存。当堆 (或栈，因为它们共享分配的内存块) 上没有更多空间时，垃圾收集器就会开始释放内存。

GC 分配一个名为 _to space_ 的新内存区域。然后，它遍历栈以找到所有活动根，并跟踪每个根，将堆上的数据复制到新堆。最后，它还将栈复制到新堆并释放旧的内存区域。

GC 是由 PCB 中的以下字段控制的：

[source,c]
----
    Eterm *high_water;
    Eterm *old_hend;    /* Heap pointers for generational GC. */
    Eterm *old_htop;
    Eterm *old_heap;
    Uint max_heap_size; /* Maximum size of heap (in words). */
    Uint16 gen_gcs;	/* Number of (minor) generational GCs. */
    Uint16 max_gen_gcs;	/* Max minor gen GCs before fullsweep. */

----

由于垃圾收集器是分代的，所以大多数时候它将使用启发式方法来查看新数据。也就是说，在所谓的 _minor collection_ 中，GC 只查看栈的顶部并将新数据移动到新堆中。旧数据，即在堆上的 `high_water` 标记 (见下图) 以下分配的数据，被移动到一个称为旧堆（old heap）的特殊区域。

大多数时候，每个进程都有另一个堆区域：旧堆，由PCB中的字段 `old_heap`、 `old_htop` 以及 `old_hend` 处理。这几乎把我们带回了原来的进程图，即四个内存区域:

[[erlang_process_memory_3]]
.Erlang Process Memory : GC

[ditaa, separation=false]
----

  +-------+               +-------+
  |  PCB  |               | Stack |  +-------+  - old_hend
  +-------+               +-------+  +       +  - old_htop
                          | free  |  +-------+
  +-------+ high_water -> +-------+  |  Old  |
  | M-box |               | Heap  |  | Heap  |
  +-------+               +-------+  +-------+  - old_heap


----

当一个进程启动时是没有旧堆的，但是一旦年轻数据成熟为旧数据，并且存在垃圾收集，就会分配旧堆。当有 _major collection_  (也称为 _full sweep_) 时，旧堆被垃圾收集。请参阅 xref:CH-Memory[] 了解垃圾收集如何工作的更多细节。在那一章中，我们还将看到如何跟踪和修复与内存相关的问题。

=== 信箱（Mailbox）和消息传递

进程通信通过消息传递完成。进程发送被实现，以便发送进程将消息从自己的堆复制到接收进程的邮箱。

在 Erlang 的 早期，并发是通过调度器中的多任务来实现的。我们将在本章后面的调度器一节中更多地讨论并发性，现在值得注意的是，在 Erlang 的第一版中没有并行性，那时一次只能同时运行一个进程。在那个版本中，发送进程可以直接在接收进程的堆上写入数据。

==== 并行发送消息

当多核系统被引入，Erlang 实现被扩展为多个调度器来调度多个并行运行的进程时，在不获取接收方的 `main lock` 的情况下直接写另一个进程的堆就不再安全了。此时引入了 `m-bufs` 的概念 (也称为“堆片段”， `heap fragments`)。 `m-bufs` 是一个在进程堆外的内存区域，其他进程可以安全地写入数据。

如果发送进程不能获得锁，它就可以将消息写入 `m-buf` 。当消息的所有数据都已复制到 `m-buf` 时，该消息将通过邮箱链接到进程。链接(_LINK_MESSAGE_， link:https://github.com/erlang/otp/blob/OTP-19.3/erts/emulator/beam/erl_message.h[erl_message.h])将消息追加到接收方的消息队列最后。

垃圾收集器然后将这些消息复制到进程的堆中。为了减少 GC 时的压力，邮箱被分成两个列表，一个包含已看到的消息，另一个包含新消息。GC 不必查看任何新消息，因为我们知道它们将在 GC 中存活下来(它们仍然在邮箱中)，这样我们可以避免一些复制。

=== 无锁消息传递

在 Erlang 19 中引入了一个新的可以每个进程分别设置的 _message_queue_data_ ，它可以取 _on_heap_ 或 _off_heap_ 的值。当设置为 _on_heap_ 时，发送进程将首先尝试获取接收方的 `main lock` ，如果成功，则消息将直接复制到接收方的堆上。以上场景只有在接收方被挂起并且没有其他进程获取该锁以发送给同一进程时才发生。如果发送方不能获得锁，它将分配一个堆片段并将消息复制到那里。

如果标志设置为 _off_heap_ ，发送方将不会尝试获得锁，而是直接写入堆片段。这将减少锁争用，但是分配一个堆片段比直接写入已经分配的进程堆的开销更大，而且会导致更大的内存使用。可能进程已经分配了一个大的空堆，但发送者依然会将新消息写入新的堆片段。

使用 _on_heap_ 方式，所有消息，包括直接分配在堆上的消息和堆碎片中的消息，都是被 GC 复制的。如果消息队列很大，许多消息没有处理，因此仍然是活动的，它们将被提升到旧堆，进程堆的大小将增加，从而导致更高的内存使用量。

当消息被复制到接收进程时，所有消息都被添加到一个链表 ( _mailbox_ ) 中。如果消息被复制到接收进程的堆中，该消息将链接到 “内部消息队列” ( `internal message queue` ，或 `seen` 消息) 并由 GC 检查。在 _off_heap_ 分配方案中，新消息被放置在 “外部” ( `external` ) `message in queue` 中，并被 GC 忽略。

==== 消息的内存区域

现在，我们可以再次将进程描述为四个内存区域的看法组一个修正了。现在每个进程由五个内存区域 ( `heap` ,`stack`, `PCB` , `internal mailbox`， 和 `external mailbox` ) 和不同数量的堆碎片 ( `m-bufs` )组成:

[[erlang_process_memory_4]]
.Erlang Process Memory : Messages

[ditaa, separation=false]
----

 +-------+             +-------+
 |  PCB  |             | Stack |
 +-------+             +-------+
                       | free  |
 +-------+  +-------+  +-------+  +-------+
 | M-box |  | M-box |  | Heap  |  |  Old  |
 | intern|  | inq   |  |       |  | Heap  |
 +-------+  +-------+  +-------+  +-------+

 +-------+  +-------+  +-------+  +-------+
 | m−buf |  | m−buf |  | m−buf |  | m−buf |
 +-------+  +-------+  +-------+  +-------+


----

每个邮箱都包含长度和两个指针信息， internal queue 的信息存储在字段 `msg.len`, `msg.first`, `msg.last` 中。用于内部队列和msg_inq，external in queue 的信息存储在  `msg_inq.len`, `msg_inq.first`, 以及 `msg_inq.last` 中。还有一个指针指向下一个要查看的消息( `msg.save` )，以实现选择性接收。

==== 检查消息处理

让我们使用自省工具来更详细地了解它是如何工作的。我们首先在邮箱中设置一个带有消息的进程，然后查看PCB。

[source,erlang]
----
4> P = spawn(fun() -> receive stop -> ok end end).
<0.63.0>
5> P ! start.
start
6> hipe_bifs:show_pcb(P).

...
  408 | msg.first     | 0x00007fd40962d880 |                    |
  416 | msg.last      | 0x00007fd40962d880 |                    |
  424 | msg.save      | 0x00007fd40962d880 |                    |
  432 | msg.len       | 0x0000000000000001 |                    |
  696 | msg_inq.first | 0x0000000000000000 |                    |
  704 | msg_inq.last  | 0x00007fd40a306238 |                    |
  712 | msg_inq.len   | 0x0000000000000000 |                    |
  616 | mbuf          | 0x0000000000000000 |                    |
  640 | mbuf_sz       | 0x0000000000000000 |                    |
...

----

从这里我们可以看到消息队列中有一条消息， `first`, `last` 和 `save` 指针都指向该消息。

如前所述，可以通过设置标志 _message_queue_data_ 来强制消息进入 in queue 队列。我们可以用以下程序来尝试:

[source,erlang]
----
include::../code/processes_chapter/src/msg.erl[]
----

有了这个程序，我们可以试着使用 _on_heap_ 或 _off_heap_ 模式发送消息，并在每次发送后查看 PCB。使用  _on_heap_  模式，我们得到了与之前的消息发送相同的结果：

[source,erlang]
----
5> msg:send_on_heap().

...

  408 | msg.first     | 0x00007fd4096283c0 |                    |
  416 | msg.last      | 0x00007fd4096283c0 |                    |
  424 | msg.save      | 0x00007fd40a3c1048 |                    |
  432 | msg.len       | 0x0000000000000001 |                    |
  696 | msg_inq.first | 0x0000000000000000 |                    |
  704 | msg_inq.last  | 0x00007fd40a3c1168 |                    |
  712 | msg_inq.len   | 0x0000000000000000 |                    |
  616 | mbuf          | 0x0000000000000000 |                    |
  640 | mbuf_sz       | 0x0000000000000000 |                    |

...

----

如果我们尝试发送到一个设置为 _off_heap_ 标志的进程，消息会落在 in queue 队列中：

[source,erlang]
----

6> msg:send_off_heap().

...

  408 | msg.first     | 0x0000000000000000 |                    |
  416 | msg.last      | 0x00007fd40a3c0618 |                    |
  424 | msg.save      | 0x00007fd40a3c0618 |                    |
  432 | msg.len       | 0x0000000000000000 |                    |
  696 | msg_inq.first | 0x00007fd3b19f1830 |                    |
  704 | msg_inq.last  | 0x00007fd3b19f1830 |                    |
  712 | msg_inq.len   | 0x0000000000000001 |                    |
  616 | mbuf          | 0x0000000000000000 |                    |
  640 | mbuf_sz       | 0x0000000000000000 |                    |

...

----

==== 向进程发送消息的过程

现在我们将忽略分布情况，也就是说我们不会考虑Erlang节点之间发送的消息。想象两个过程 `P1` 和 `P2`。进程 `P1` 想向进程 `P2`发送一条消息(_Msg_)，如图所示：

[[erlang_message_passing_1]]
.Erlang Message Passing Step 1

[ditaa, separation=false]
----
                 P 1
 +---------------------------------+
 | +-------+  +-------+  +-------+ |
 | |  PCB  |  | Stack |  |  Old  | |
 | +-------+  +-------+  | Heap  | |
 |            | free  |  +-------+ |
 |            |       |            |
 | +-------+  +-------+  +-------+ |
 | | M-box |  | Heap  |  | M-box | |
 | | inq   |  | [Msg] |  | intern| |
 | +-------+  +-------+  +-------+ |
 +---------------------------------+

                  |
                  | P2 ! Msg
                  v
    
                 P 2
 +---------------------------------+
 | +-------+  +-------+  +-------+ |
 | |  PCB  |  | Stack |  |  Old  | |
 | +-------+  +-------+  | Heap  | |
 |            | free  |  +-------+ |
 |            |       |            |
 | +-------+  +-------+  +-------+ |
 | | M-box |  | Heap  |  | M-box | |
 | | inq   |  |       |  | intern| |
 | +-------+  +-------+  +-------+ |
 +---------------------------------+


----

进程 `P1` 将执行以下步骤:

* 计算 _Msg_ 的大小。
* 为消息分配空间(如前所述，在 `P2` 的堆上或堆外)。
* 将 _Msg_ 从 `P1` 的堆复制到分配的空间。
* 分配并填充一个 _ErlMessage_ 结构体来包装消息。
* 将 _ErlMessage_ 链接到 _ErlMsgQueue_ 或 _ErlMsgInQueue_。

如果进程 `P2` 被挂起，没有其他进程尝试向 `P2` 发送消息，并且堆上有空间，分配策略为 _on_heap_，那么消息将直接在堆上写入：

[[erlang_message_passing_2]]
.Erlang Message Passing Step 2

[ditaa, separation=false]
----
                 P 1
 +---------------------------------+
 | +-------+  +-------+  +-------+ |
 | |  PCB  |  | Stack |  |  Old  | |
 | +-------+  +-------+  | Heap  | |
 |            | free  |  +-------+ |
 |            |       |            |
 | +-------+  +-------+  +-------+ |
 | | M-box |  | Heap  |  | M-box | |
 | | inq   |  | [Msg] |  | intern| |
 | +-------+  +-------+  +-------+ |
 +---------------------------------+

                  |
                  | P2 ! Msg
                  v
    
                 P 2
 +---------------------------------+
 | +-------+  +-------+  +-------+ |
 | |  PCB  |  | Stack |  |  Old  | |
 | +-------+  +-------+  | Heap  | |
 |            | free  |  +-------+ |
 |            |       |            |
 | +-------+  +-------+  +-------+ |
 | | M-box |  | Heap  |  | M-box | |
 | | inq   |  | [Msg] |  | intern| |
 | |       |  |       |  |       | |
 | |       |  |  ^    |  | first | |
 | +-------+  +--|----+  +---|---+ |
 |               |           v     |
 |               |       +-------+ |
 |               |       |next []| |
 |               |       | m  *  | |
 |               |       +----|--+ |
 |               |            |    |
 |               +------------+    |
 +---------------------------------+


----

如果 `P1` 不能获得 `P2` 的 `main lock`，或者 `P2` 的堆空间不够，分配策略为 _on_heap_，那么消息将写入 `m-buf`，但链接到内部邮箱：

[[erlang_message_passing_3]]
.Erlang Message Passing Step 3
[ditaa, separation=false]
----
                 P 1
 +---------------------------------+
 | +-------+  +-------+  +-------+ |
 | |  PCB  |  | Stack |  |  Old  | |
 | +-------+  +-------+  | Heap  | |
 |            | free  |  +-------+ |
 |            |       |            |
 | +-------+  +-------+  +-------+ |
 | | M-box |  | Heap  |  | M-box | |
 | | inq   |  | [Msg] |  | intern| |
 | +-------+  +-------+  +-------+ |
 +---------------------------------+

                  |
                  | P2 ! Msg
                  v
    
                 P 2
 +---------------------------------+
 | +-------+  +-------+  +-------+ |
 | |  PCB  |  | Stack |  |  Old  | |
 | +-------+  +-------+  | Heap  | |
 |            | free  |  +-------+ |
 |            |       |            |
 | +-------+  +-------+  +-------+ |
 | | M-box |  | Heap  |  | M-box | |
 | | inq   |  |       |  | intern| |
 | |       |  |       |  |       | |
 | |       |  |       |  | first | |
 | +-------+  +-------+  +---|---+ |
 |              m−buf        v     |
 |            +-------+  +-------+ |
 |         +->| [Msg] |  |next []| |
 |         |  |       |  | m  *  | |
 |         |  +-------+  +----|--+ |
 |         |                  |    |
 |         +------------------+    |
 +---------------------------------+


----

在一次GC之后，消息将被移动到堆中。

如果分配策略是 _off_heap_，消息将以 `m-buf` 结束，并链接到外部邮箱：

[[erlang_message_passing_4]]
.Erlang Message Passing Step 4
[ditaa, separation=false]
----
                 P 1
 +---------------------------------+
 | +-------+  +-------+  +-------+ |
 | |  PCB  |  | Stack |  |  Old  | |
 | +-------+  +-------+  | Heap  | |
 |            | free  |  +-------+ |
 |            |       |            |
 | +-------+  +-------+  +-------+ |
 | | M-box |  | Heap  |  | M-box | |
 | | inq   |  | [Msg] |  | intern| |
 | +-------+  +-------+  +-------+ |
 +---------------------------------+

                  |
                  | P2 ! Msg
                  v
    
                 P 2
 +---------------------------------+
 | +-------+  +-------+  +-------+ |
 | |  PCB  |  | Stack |  |  Old  | |
 | +-------+  +-------+  | Heap  | |
 |            | free  |  +-------+ |
 |            |       |            |
 | +-------+  +-------+  +-------+ |
 | | M-box |  | Heap  |  | M-box | |
 | | inq   |  |       |  | intern| |
 | |       |  |       |  |       | |
 | | first |  |       |  | first | |
 | +---|---+  +-------+  +-------+ |
 |     v        m−buf              |
 | +--------+  +-----+             |
 | |next [] |  |     |             |
 | |        |  |     |             |
 | | m *------>|[Msg]|             |
 | |        |  |     |             |
 | +--------+  +-----+             |
 +---------------------------------+
----

在一次 GC 之后，消息仍然在  `m-buf` 中。直到接收到该消息并从堆上的其他对象或从栈可访问该消息，该消息才会在 GC 期间被复制到进程堆中。

==== 消息接收

Erlang 支持选择性接收，这意味着不匹配的消息可以留在邮箱中等待以后收取。如果消息不匹配，即使信箱中有消息的时候，进程也可能是挂起的。 `msg.save`  字段包含一个指向下一条要查看的消息的指针。

在后面的章节中，我们将详细介绍  `m-bufs`  以及垃圾收集器如何处理邮箱。在后面的章节中，我们还将详细介绍如何在 BEAM 中实现消息接收。

==== 消息传递调优

使用 Erlang 19 中引入的新 _message_queue_data_ 标志，您可以以一种新的方式用内存空间来 ”*交换*“ 执行时间。如果接收进程已经过载并一直持有 `main lock`，那么使用 _off_heap_ 分配可能是一个好策略，这种策略能让发送进程快速地将消息转储到 `m-buf` 中。

如果两个进程有一个良好平衡的生产者消费者行为，其中没有真正争夺进程锁，那么直接在接收者堆上分配会更快，并且会使用更少的内存。

如果接收方已经过载，且不断接受消息，处理消息的速度慢与接受新消息的速度，那么它实际上可能会开始使用更多的内存，因为消息被不断复制到堆中，并迁移到旧堆中。由于未读消息被认为是活动的，因此堆将不断增长并使用更多内存。

为了找出哪种分配策略最适合你的系统，你需要对它进行基准测试和行为度量。要做的第一个也是最简单的测试可能是在系统开始时更改默认的分配策略。ERTS 的 _hmqd_ 标志将默认策略设置为 _off_heap_ 或 _on_heap_。如果启动Erlang 时没有更改此标志，则默认为 _on_heap_。通过设置基准，让 Erlang 以 _+hmqd off_heap_ 方式启动，您可以测试如果所有进程都使用非堆分配，系统的表现是更好还是更差。然后，您可能希望找到瓶颈进程，并通过配置切换分配策略来只测试这些进程。

=== 进程字典（PD）
实际上，进程中还有一个可以存储 Erlang 项式的内存区域，即 _Process Dictionary_。

_Process Dictionary_ (PD) 是一个进程的本地键值存储。这样做的一个优点是，所有的键和值都存储在堆中，不需要像 send 或 ETS 表那样进行复制。

我们现在可以用另一个内存区域 - PD，进程字典，来更新我们对进程观点：

[[erlang_process_memory_5]]
.Erlang Process Memory : Process Dictionary

[ditaa, separation=false]
----

 +-------+             +-------+  +-------+
 |  PCB  |             | Stack |  |  PD   |
 +-------+             +-------+  +-------+
                       | free  |
 +-------+  +-------+  +-------+  +-------+
 | M-box |  | M-box |  | Heap  |  |  Old  |
 | intern|  | inq   |  |       |  | Heap  |
 +-------+  +-------+  +-------+  +-------+

 +-------+  +-------+  +-------+  +-------+
 | m−buf |  | m−buf |  | m−buf |  | m−buf |
 +-------+  +-------+  +-------+  +-------+


----

对于 PD 这么小的数组，在长度增长之前，你肯定会遇到一些碰撞。每个哈希值指向一个具有键值对的 bucket。bucket 实际上是堆上的 Erlang list。list 中的每个条目都是同样存储在堆中的二元元组(_{key, Value}_)。

在PD中放置一个元素并不是完全自由的，它会导致一个额外的元组和一个缺点，并可能导致垃圾收集被触发。更新位于 bucket 中的 dictionary 中的 key，会导致整个bucket (整个列表) 被重新分配，以确保我们不会获得从旧堆指向新堆的指针。(在 xref:CH-Memory[] 中，我们将看到垃圾收集如何工作的细节。)

=== 深入

在本章中，我们已经了解了流程是如何实现的。特别地，我们查看了进程的内存是如何组织的，消息是如何传递的，以及PCB中的信息。我们还介绍了一些用于检查进程自检的工具，如 _erlang:process_info_ 和 _hipe:show_*_bifs。

使用函数 `erlang:processes/0` 和 `erlang:process_info/1,2` 检查系统中的进程。以下是一些可以尝试的功能：

[source,erlang]
----

1> Ps = erlang:processes().
[<0.0.0>,<0.3.0>,<0.6.0>,<0.7.0>,<0.9.0>,<0.10.0>,<0.11.0>,
 <0.12.0>,<0.13.0>,<0.14.0>,<0.15.0>,<0.16.0>,<0.17.0>,
 <0.19.0>,<0.20.0>,<0.21.0>,<0.22.0>,<0.23.0>,<0.24.0>,
 <0.25.0>,<0.26.0>,<0.27.0>,<0.28.0>,<0.29.0>,<0.33.0>]
2> P = self().
<0.33.0>
3> erlang:process_info(P).
[{current_function,{erl_eval,do_apply,6}},
 {initial_call,{erlang,apply,2}},
 {status,running},
 {message_queue_len,0},
 {messages,[]},
 {links,[<0.27.0>]},
 {dictionary,[]},
 {trap_exit,false},
 {error_handler,error_handler},
 {priority,normal},
 {group_leader,<0.26.0>},
 {total_heap_size,17730},
 {heap_size,6772},
 {stack_size,24},
 {reductions,25944},
 {garbage_collection,[{min_bin_vheap_size,46422},
                      {min_heap_size,233},
                      {fullsweep_after,65535},
                      {minor_gcs,1}]},
 {suspending,[]}]
 4>  lists:keysort(2,[{P,element(2,erlang:process_info(P,
     total_heap_size))} || P <- Ps]).
[{<0.10.0>,233},
 {<0.13.0>,233},
 {<0.14.0>,233},
 {<0.15.0>,233},
 {<0.16.0>,233},
 {<0.17.0>,233},
 {<0.19.0>,233},
 {<0.20.0>,233},
 {<0.21.0>,233},
 {<0.22.0>,233},
 {<0.23.0>,233},
 {<0.25.0>,233},
 {<0.28.0>,233},
 {<0.29.0>,233},
 {<0.6.0>,752},
 {<0.9.0>,752},
 {<0.11.0>,1363},
 {<0.7.0>,1597},
 {<0.0.0>,1974},
 {<0.24.0>,2585},
 {<0.26.0>,6771},
 {<0.12.0>,13544},
 {<0.33.0>,13544},
 {<0.3.0>,15143},
 {<0.27.0>,32875}]
9> 

----



