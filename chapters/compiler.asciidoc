[[CH-Compiler]]
== 编译器

虽然本书不是一本设计 Erlang 编程语言的书，但是，ERTS 的目标是运行 Erlang 代码，所以你需要了解如何编译 Erlang 代码。本章将涉及到用来生成可读的 BEAM 码的编译器选项，以及如何位生成的 beam 文件增加调试信息。本章的最后，也有一节关于 Elixir 编译器的内容。

那些对于将他们喜爱的语言编译为 ERTS 代码的读者，可以关注本章包含的关于编译器中的中间格式区别的详情，以及如何在 beam 编译器后台挂载你的编译器的信息。

我会展示解析转换，并通过样例来说明如何通过它们来调整 Erlang 语言。

=== 编译 Erlang

Erlang 被从 +.erl+ 格式文件的模块源代码，编译成二进制 +.beam+ 文件

编译器可以从操作系统终端，通过 +erlc+ 启动：

[source,bash]
----
> erlc foo.erl
----

编译器也可以在 Erlang 终端中，使用 +c+ 或者调用  +compile:file/{1,2}+ 来调用。

[source,erlang]
----
1> c(foo).
----

或者

[source,erlang]
----
1> compile:file(foo).
----

+compile:file+ 的第二个可选参数接受编译器选项 list。全部的可选参数清单可以在编译器模块的文档中找到，参见 link:http://www.erlang.org/doc/man/compile.html[] 。

通常，编译器会将 Erlang 源代码从 +.erl+ 格式文件，编译并写入到二进制 +.beam+ 文件中。你也可以通过使用编译器的 +binary+ 选项，将编译二进制结果作为Erlang 项式（Erlang term）直接输出。这个选项被重载以用来使用数据来返回中间格式结果，而不是将其写入文件。如果你期望编译器返回Core Erlang 代码，可以使用 +[core, binary]+ 选项。

编译器的执行，包含由如图 xref:fig_compiler_passes[] 中所示的若干“遍”（pass）。

[[fig_compiler_passes]]
.Compiler Passes
[ditaa]
----
                                                    (.erl)                                       [] ⇒ Compiler options
                                                       |                                         () ⇒ files
                                                       v                                         {} ⇒ erlang terms
                                               +---------------+                                 boxes ⇒ passes
                                               |    Scanner    |
                                               | (Part of epp) |
                                               +---------------+
                                                       |
                                                       v
                                               +---------------+
                                               | Pre processor |
                                               |      epp      |
                                               +---------------+
                                                       |
                                                       v
                                               +---------------+     +---------------+
                                               |     Parse     | --> | user defined  |
                                               |   Transform   | <-- | transformation|
                                               +---------------+     +---------------+
                                                       |
                                                       +---------> (.Pbeam) [makedep]
                                                       +---------> {dep} [makedep, binary]
                                                       |
                                                       +---------> (.pp) [dpp]
                                                       +---------> {AST} [dpp, binary]
                                                       |
                                                       v
                                               +---------------+
                                               |    Linter     |
                                               |               |
                                               +---------------+
                                                       |
                                                       +---------> (.P) ['P']
                                                       +---------> {AST} ['P',binary]
                                                       |
                                                       v
                                               +---------------+
                                               |    Save AST   |
                                               |               |
                                               +---------------+
                                                       |
                                                       v
                                               +---------------+
                                               |     Expand    |
                                               |               |
                                               +---------------+
                                                       |
                                                       +---------> (.E) ['E']
                                                       +---------> {.E} ['E', binary]
                                                       |
                                                       v
                                               +---------------+
                                               |     Core      |
                                               |    Erlang     |
                                               +---------------+
                                                       |
                                                       +---------> (.core) [dcore|to_core0]
                                                       +---------> {core} [to_core0,binary]
                                                       |
                                                       v
                         +---------------+     +---------------+     +---------------+
                         |      Core     | ... |      Core     | ... |      Core     |
                         |     Pass 0    |     |     Pass 1    |     |     Pass N    |
                         +---------------+     +---------------+     +---------------+
                                                       |
                                                       +---------> (.core) [to_core]
                                                       +---------> {core} [to_core,binary]
                                                       |
                                                       v
                                               +---------------+
                                               |    Kernel     |
                                               |    Erlang     |
                                               +---------------+
                                                       |
                                                       v
                         +---------------+     +---------------+     +---------------+
                         |    Kernal     | ... |    Kernal     | ... |    Kernal     |
                         |    Pass 0     |     |    Pass 1     |     |    Pass N     |
                         +---------------+     +---------------+     +---------------+
                                                       |
                                                       v
                                               +---------------+
                                               |   BEAM Code   |
                                               |               |
                                               +---------------+
                                                       |
                                                       v
                         +---------------+     +---------------+     +---------------+
                         |     ASM       | ... |     ASM       | ... |     ASM       |
                         |    Pass 0     |     |    Pass 1     |     |    Pass N     |
                         +---------------+     +---------------+     +---------------+
                                                       |
                                                       +---------> (.S) ['S']
                                                       +---------> {.S} ['S', binary]
                                                       |
                                                       v
                                               +---------------+
                                               |  Native Code  |
                                               |               |
                                               +---------------+
                                                       |
                                                       v
    
                                                    (.beam)
----

如果你想看到完整且最新的编译器的“遍”清单，可以在 Erlang 终端中运行 +compile:options/0+。当然，有关浏览器的最终信息来源来自于 link:https://github.com/erlang/otp/blob/maint/lib/compiler/src/compile.erl[compile.erl] 

=== 产生中间结果输出

阅读由编译器产生的代码对于试图理解虚拟机如何工作有很大帮助。幸运的是，编译器可以输出每遍后产生的中间代码，以及最终的 beam 码。

我们来尝试一下这些新知识，并且观察一下生成的代码。


[source,erlang]
----
 1> compile:options().
 dpp - Generate .pp file
 'P' - Generate .P source listing file
----
 ...
----
 'E' - Generate .E source listing file
----
 ...
----
 'S' - Generate .S file
----

我们来尝试一个小例子程序 "world.erl"：
[source,erlang]
----
include::../code/compiler_chapter/src/world.erl[]
----

以及包含文件： "world.hrl"
[source,erlang]
----
include::../code/compiler_chapter/src/world.hrl[]
----

如果此时使用 'P' 选项编译以得到解析后的文件，你会得到一个 "world.P" 文件。

[source,erlang]
----
2> c(world, ['P']). 
** Warning: No object file created - nothing loaded **
ok
----

在结果输出的 +.P+ 文件中，你可以看到应用预处理器（解析转换）处理后的美化格式版本的代码：

[source,erlang]
----
include::../code/compiler_chapter/src/world.P[]
----

要查看所有的源代码转换执行完毕后代码的样子，可以使用 +'E'+ 选项。

[source,erlang]
----
3> c(world, ['E']). 
** Warning: No object file created - nothing loaded **
ok
----

这将输出一个 +.E+ 文件，其中所有的编译器指令都被移除，并且内建函数 +module_info/{1,2}+ 也被加入到源代码中。

[source,erlang]
----
include::../code/compiler_chapter/src/world.E[]
----

我们将在观察 xref:SEC-parse_transform[] 解析转换时，使用 'P' 和 'E' 选项，但首先我们先来看看汇编器生成的 BEAM 码。使用编译器选项 +'S'+ 可以得到一个内容为源代码对应的每条 BEAM 指令的 Erlang 项式的 +.S+ 文件。

[source,erlang]
----
3> c(world, ['S']). 
** Warning: No object file created - nothing loaded **
ok
----

+world.S+ 文件看起来是这样的：

[source,erlang]
----
include::../code/compiler_chapter/src/world.S[]
----

因为这是一个由点 ("_._"，译者注：点是每行的结尾) 分隔的 Erlang 项式组成的文件，你可以使用如下命令将这个文件读入 Erlang 终端：

----
{ok, BEAM_Code} = file:consult("world.S").
----

汇编码大部分按照原始的源代码格式布局。首条指令定义了代码模块的名称。注释中提到的版本(+%% version = 0+) 是 beam 操作码格式的版本(由 beam_opcodes 给出的 +beam_opcodes:format_number/0+)
接下来是一个导出清单以及编译器属性（本例中没有），这和 Erlang 源码模块中的差不多。
第一条像是 beam 指令的是 +{labels, 7}+ ，它告诉虚拟机代码中共有7个标签（label），使得对代码的一遍处理即可为所有的标签分配空间。
接下来是每个函数的实际代码。第一条指令给出了函数名称，标签数表示的参数个数和入口点。
你可以使用 +'S'+ 选项来尽最大努力使你理解 BEAM 如何工作，我们也将在后续章节这么做。当你开发自己的编程语言，通过Core  Erlang 编译为 BEAM 码时，能看到生成的代码也是非常有价值的。

=== 编译器的遍（Pass）

接下来几节，我们将深入到图 xref:fig_compiler_passes[] 中所示的编译器的各遍。对于面向 BEAM 的编程语言设计者，这些内容将向你展示使用 宏（macros），解析转换（parse
transforms），Core Erlang，BEAM 码等不同方法你可以做什么，以及它们之间是如何相互依赖的。
在调优 Erlang 代码时，通过查看优化前后的生成代码，来了解何种优化在何时，以何种方式起作用是非常有效的。

==== 编译器 Pass：Erlang 预处理器 (epp)

编译过程起始于一个组合的分词器（或者扫描器）和预处理器。预处理器驱动分词器运行。这意味着宏被以符号的方式展开，而不纯粹是字符串替换（不像是 m4 或 cpp）。你不能够使用 Erlang 宏来定义自己的语法，宏像一个与周围字符独立的符号一样被展开。所以你也不能将一个宏与（它前后连续的）字符连接为新的符号：

[source,erlang]
----
-define(plus,+).
t(A,B) -> A?plus+B.
----

This will expand to

----
t(A,B) -> A + + B.
----
and not
----
t(A,B) -> A ++ B.
----

另一方面，由于宏展开实在符号级别完成的，宏的右值（rhs）也不必是一个合法的 Erlang 项式，例如：

----
-define(p,o, o]).
 t() -> [f,?p.
----

这除了能帮你赢得 Erlang 混乱代码大赛之外，没什么真实用处。记住这个知识的主要用途是，你不能使用 Erlang 预处理器来定义一个与 Erlang 句法不同的编程语言。幸运的是，你可以用其他手段定义新语言，我们将在后文看到这些内容。

[[SEC-parse_transform]]
==== 编译器 Pass: 解析转换（Parse Transformations)

调整Erlang语言最简单的方法是通过解析转换(Parse Transformations 或 parse transforms)。解析转换带有各种各样的警告，比如OTP文档中的注释:

WARNING: Programmers are strongly advised not to engage in parse
transformations and no support is offered for problems encountered.

当你使用了解析转换，你基本上在写一个额外的编译器“pass”，如果不小心的话，可能会导致意外的结果。你需要在使用解析转换的模块声明对它的使用，这对模块来说是本地的，这样对编译器的调整也比较安全。在我看来，应用解析转换最大的问题在于你自己发明的句法，这可能对别人阅读代码造成许多困难。至少在你的解析转换与广受欢迎的 QLC 等齐名前都如此。

好吧，所以你知道你不应该使用它，但如果你必须使用，你得知道它是什么。解析转换是在抽象语法树(AST)(参见 link:http://www.erlang.org/doc/apps/erts/absform.html[])上运行的函数。编译器依次做预处理，符号化和解析，然后它会用 AST 调用解析转换函数，并期望返回新的AST。



这意味着您不能从根本上改变 Erlang 句法，但是您可以更改语义。举个例子，假如你想在 Erlang 代码中直接写json代码，你也很幸运，因为 json 和 Erlang 的标记是基本上是一样的。另外，由于 Erlang 编译器在解析转换后的 linter pass 才会做大部分的完整性检查工作，所以，可以允许一个不代表有效Erlang的 AST。

要编写解析转换，您需要编写一个Erlang模块(让我们称它为_p_)，它导出函数 +parse_transform/2+。如果这个模块(我们称其为_m_)的编译过程包含 +{parse_transform p}+ 编译器选项，这个函数就会在解析转换 pass 期间被编译器调用。函数的参数是模块 m 的 AST 和调用的编译器时的编译器选项。

[NOTE]
====


注意，您不能从文件中给出的任何编译器选项。因为你不能够从代码来给出（编译器）选项，还真有点麻烦。

编译器直到发生在解析转换后的 _expand_ pass才会展开编译器选项。

====

抽象格式的文档确实有些密集，我们很难通过阅读来掌握抽象格式文档。我鼓励您使用句法工具（_syntax_tools_），特别是 +erl_syntax_lib+ 用于处理AST上的任何重要工作。

在这里，为帮助我们理解，我们将开发一个简单的解析转换例子来理解AST。我们将直接在 AST 上工作，使用老的可靠的 +io:format+ 方法来代替句法工具（syntax_tools）。

首先，我们创建一个可以编译 json_test.erl 的例子：

[source,erlang]
----
-module(json_test).
-compile({parse_transform, json_parser}).
-export([test/1]).

test(V) ->
    <<{{
      "name"  : "Jack (\"Bee\") Nimble",
      "format": {
                 "type"      : "rect",
                 "widths"     : [1920,1600],
                 "height"    : (-1080),
                 "interlace" : false,
                 "frame rate": V
                }
      }}>>.
----

然后，我们创建一个最小化的解析转换模块 +json_parser.erl+ ：

[source,erlang]
----
-module(json_parser).
-export([parse_transform/2]).

parse_transform(AST, _Options) ->
  io:format("~p~n", [AST]),
  AST.
----

这个有代表性的解析转换返回了未经改变的 AST，同时将其打印出来，这样你可以观察 AST 到底是什么样子的。

----
> c(json_parser).
{ok,json_parser}
2> c(json_test).
[{attribute,1,file,{"./json_test.erl",1}},
 {attribute,1,module,json_test},
 {attribute,3,export,[{test,1}]},
 {function,5,test,1,
  [{clause,5,
    [{var,5,'V'}],
    [],
    [{bin,6,
      [{bin_element,6,
        {tuple,6,
         [{tuple,6,
           [{remote,7,{string,7,"name"},{string,7,"Jack (\"Bee\") Nimble"}},
            {remote,8,
             {string,8,"format"},
             {tuple,8,
              [{remote,9,{string,9,"type"},{string,9,"rect"}},
               {remote,10,
                {string,10,"widths"},
                {cons,10,
                 {integer,10,1920},
                 {cons,10,{integer,10,1600},{nil,10}}}},
               {remote,11,{string,11,"height"},{op,11,'-',{integer,11,1080}}},
               {remote,12,{string,12,"interlace"},{atom,12,false}},
               {remote,13,{string,13,"frame rate"},{var,13,'V'}}]}}]}]},
        default,default}]}]}]},
 {eof,16}]
./json_test.erl:7: illegal expression
./json_test.erl:8: illegal expression
./json_test.erl:5: Warning: variable 'V' is unused
error
----



因为模块包含无效的 Erlang 语法，故编译 +json_test+ 失败，但是你可以看到AST是什么样子的。现在我们可以编写一些函数来遍历 AST 并将 json 代码回写到 Erlang 代码中。footnote:[此处的翻译是在根据 link:http://www.erlang.org/eeps/eep-0018.html[EEP 18] (Erlang增强建议18:"JSON bifs")进行的]

[source,erlang]
----
-module(json_parser).
-export([parse_transform/2]).

parse_transform(AST, _Options) ->
    json(AST, []).

-define(FUNCTION(Clauses), {function, Label, Name, Arity, Clauses}).

%% We are only interested in code inside functions.
json([?FUNCTION(Clauses) | Elements], Res) ->
    json(Elements, [?FUNCTION(json_clauses(Clauses)) | Res]);
json([Other|Elements], Res) -> json(Elements, [Other | Res]);
json([], Res) -> lists:reverse(Res).

%% We are interested in the code in the body of a function.
json_clauses([{clause, CLine, A1, A2, Code} | Clauses]) ->
    [{clause, CLine, A1, A2, json_code(Code)} | json_clauses(Clauses)];
json_clauses([]) -> [].


-define(JSON(Json), {bin, _, [{bin_element
                                         , _
                                         , {tuple, _, [Json]}
                                         , _
                                         , _}]}).

%% We look for: <<"json">> = Json-Term
json_code([])                     -> [];
json_code([?JSON(Json)|MoreCode]) -> [parse_json(Json) | json_code(MoreCode)];
json_code(Code)                   -> Code.

%% Json Object -> [{}] | [{Label, Term}]
parse_json({tuple,Line,[]})            -> {cons, Line, {tuple, Line, []}};
parse_json({tuple,Line,Fields})        -> parse_json_fields(Fields,Line);
%% Json Array -> List
parse_json({cons, Line, Head, Tail})   -> {cons, Line, parse_json(Head),
                                                       parse_json(Tail)};
parse_json({nil, Line})                -> {nil, Line};
%% Json String -> <<String>>
parse_json({string, Line, String})     -> str_to_bin(String, Line);
%% Json Integer -> Intger
parse_json({integer, Line, Integer})   -> {integer, Line, Integer};
%% Json Float -> Float
parse_json({float, Line, Float})       -> {float, Line, Float};
%% Json Constant -> true | false | null
parse_json({atom, Line, true})         -> {atom, Line, true};
parse_json({atom, Line, false})        -> {atom, Line, false};
parse_json({atom, Line, null})         -> {atom, Line, null};

%% Variables, should contain Erlang encoded Json
parse_json({var, Line, Var})         -> {var, Line, Var};
%% Json Negative Integer or Float
parse_json({op, Line, '-', {Type, _, N}}) when Type =:= integer
                                             ; Type =:= float ->
                                          {Type, Line, -N}.
%% parse_json(Code)                  -> io:format("Code: ~p~n",[Code]), Code.

-define(FIELD(Label, Code), {remote, L, {string, _, Label}, Code}).

parse_json_fields([], L) -> {nil, L};
%% Label : Json-Term  --> [{<<Label>>, Term} | Rest]
parse_json_fields([?FIELD(Label, Code) | Rest], _) ->
    cons(tuple(str_to_bin(Label, L), parse_json(Code), L)
         , parse_json_fields(Rest, L)
         , L).


tuple(E1, E2, Line)    -> {tuple, Line, [E1, E2]}.
cons(Head, Tail, Line) -> {cons, Line, Head, Tail}.

str_to_bin(String, Line) ->
    {bin
     , Line
     , [{bin_element
         , Line
         , {string, Line, String}
         , default
         , default
        }
       ]
    }.
----

现在，我们可以无错的将 +json_test+ 编译通过了：

[source,erlang]
----
1> c(json_parser).
{ok,json_parser}
2> c(json_test).
{ok,json_test}
3> json_test:test(42).
[{<<"name">>,<<"Jack (\"Bee\") Nimble">>},
{<<"format">>,
  [{<<"type">>,<<"rect">>},
   {<<"widths">>,[1920,1600]},
   {<<"height">>,-1080},
   {<<"interlace">>,false},
   {<<"frame rate">>,42}]}]
----

由 +parse_transform/2+ 产生的 AST 必须是合法的 Erlang 代码，除非是你做多个解析转换。（译注：指多次解析转换的中间结果AST），代码的合法性检查是在下边的编译 pass 进行的。

==== 编译器 Pass：Linter

Linter 为句法正确但是不好的代码生成警告，类似"export_all flag enabled"

==== 编译器 Pass：保存抽象语法树（AST）

为了启用对某模块的调试，您可以“调试编译”该模块，即将选项 +debug_info+ 传递给编译器。抽象语法树将被“Save AST”保存，直到编译结束时，它将被写入.beam文件。

重要的是，要注意代码是在任意优化被应用前保存的，所以如果编译器的优化 pass 有 bug，你将在调试器中运行代码时得到不同的行为。如果你正在实现你自己的编译器这可能会把你搞糊涂。

==== 编译器 Pass：Expand

在扩展（Expand）阶段，诸如 record 等源 erlang 结构将被扩展为底层的 erlang 结构。编译器选项 "+-compile(...)+" 也会被 _扩展_ 为元数据。

==== 编译器 Pass：Core Erlang

Core Erlang 是一种适用于编译器优化的严格函数式语言。通过减少表示同一操作的方法的数量，使代码转换更容易。其中一种方法是通过引入 let 和 letrec 表达式来使作用域更明确。

核心Erlang是一种适用于编译器优化的严格函数式语言。通过减少表示同一操作的方法的数量，使代码转换更容易。其中一种方法是通过引入 _let_ 和 _letrec_ 表达式来使作用域更明确。

对于希望在 ERTS 中运行的语言来说，Core Erlang 是最好的目标。它很少更改，并且以一种干净的方式包含了 Erlang 的所有方面。如果您直接针对beam指令集，您将不得不处理更多的细节，并且该指令集通常在每个主要的ERTS版本之间略有变化。另一方面，如果您直接以Erlang为目标，那么您可以描述的内容将受到更大的限制，而且您还必须处理更多的细节，因为 Core Erlang 是一种更干净的语言。

你可以使用 “to_core” 选项来将 Erlang 文件编译为 core erlang，但请注意，这将把 Core Erlang 程序写入带有 “.core" 扩展名的文件。你可以通过编译器选项 "from_core" 来编译来自带有 “.core" 扩展名的 core erlang 文件。

----
1> c(world, to_core).
** Warning: No object file created - nothing loaded **
ok
2> c(world, from_core).
{ok,world}
----

注意 +.core+ 文件是用人类可读的 core 格式编写的文本文件。要获得作为 Erlang 项式的核心程序，可以在编译中添加 +binary+ 选项。

==== 编译器 Pass：Kernel Erlang

Kernel Erlang 是 Core Erlang 的一个扁平版本，它们有一些不同之处。例如，每个变量在一个完整的函数作用域中都是唯一的。模式匹配被编译成更原始的操作。

==== 编译器 Pass：BEAM 代码

正常编译的最后一步是外部 beam 代码格式。一些底层的优化，如死代码块消除和窥孔优化是在这个级别上完成的。

BEAM 码在 xref:CH-Instructions[] 和 xref:AP-Instructions[] 中有详细描述。

==== 编译器 Pass：原生 (Native) 代码

如果您在编译中添加了 +native+ 标志，并且您有一个启用了 HiPE (High Performance *Erlang* ，译者注：类似 JIT )  的运行时系统，那么编译器将为您的模块生成本机代码，并将本地代码与 beam 代码一起存储在 +.beam+ 文件中。

=== 其他编译器工具

有许多工具可以帮助您处理代码生成和代码操作。这些工具是用 Erlang 编写的，但并不是运行时系统的一部分，但是如果你想在 BEAM 之上实现另一种语言，了解它们是非常好的。

在本节中，我们将介绍三个最有用的代码工具: 词法分析器 ( Leex )、解析器生成器 ( Yecc )，和一组用于操作（语言）抽象形式的通用函数 ( Syntax Tools )。

==== Leex

Leex是Erlang 词法分析器生成器。词法分析器生成器从定义文件 +xrl+ 获取 DFA （译注，DFA 是 Deterministic Finite Automaton 的简称，形式语言术语，译为 _确定有限自动机_）的描述，并生成一个与 DFA 描述的符号相匹配 Erlang 程序。

关于如何为分词器编写 DFA 定义的细节已经超出了本书的范围。要得到详细的解释，我推荐 “龙书”。（是指 Aho, Sethi 和 Ullman合著的 《Compiler》)。其他好的资源包括激发了 leex 灵感的  “flex” 程序的手册，以及 leex 文档本身。如果你已经安装了 flex，你可以通过输入以下命令来阅读完整的手册：

----
> info flex
----

在线 Erlang 文档也有 leex 手册 (参见 link:http://erlang.org/doc/man/yecc.html[yecc.html])。

我们可以使用词法分析器生成器创建一个识别 JSON 符号的 Erlang 程序。通过查看JSON定义 link:http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf  我们可以看到，我们只需要处理少量的令牌。

[source,erlang]
----
include::../code/compiler_chapter/src/json_tokens.xrl[]
----

通过使用 Leex 编译器，我们可以将这个 DFA 编译为 Erlang 代码，并且通过提供 dfa_graph 选项，我们还可以生成一个 dot-file，可以用 Graphviz 查看。

[source,erlang]
----
1> leex:file(json_tokens, [dfa_graph]).
{ok, "./json_tokens.erl"}
2>
----

你可以通过 dotty 来查看 DFA 图。

[source, sh]
----
> dotty json_tokens.dot
----

image::../code/compiler_chapter/json_tokens.png[]

我们可以在示例 json 文件 (test.json) 上尝试分词器。

----
include::../code/compiler_chapter/src/test.json[]
----

首先，我们需要编译分词器，然后读取文件并将其转换为字符串。最后，我们可以使用 leex 生成的 string/1 函数来将测试文件分词。

[source, erlang]
----
2> c(json_tokens).
{ok,json_tokens}.
3> f(File), f(L), {ok, File} = file:read_file("test.json"), L = binary_to_list(File), ok.
ok
4> f(Tokens), {ok, Tokens,_} = json_tokens:string(L), hd(Tokens).
{'{',1}
5>
----

shell 函数 f/1 告诉终端忘记变量绑定。如果您想尝试多次绑定变量的命令，例如在编写 lexer 并希望在每次重写后尝试它的场景下，这是很有用的。有关 shell 命令的细节将在后面的章节中介绍。

有了 JSON 的分词器，我们现在可以使用解析器生成器 Yecc 来编写一个 JSON 解析器了。


==== Yecc

Yecc 是 Erlang 的解析器生成器。该名称来自Yacc (Yet another compiler compiler)，它是 C 的经典的解析器生成器。

现在我们有了一个用于 JSON 项式的词法分析器，我们就可以使用 yecc 编写一个解析器。

[source,erlang]
----
include::../code/compiler_chapter/src/yecc_json_parser.yrl[]
----

然后，我们可以使用 yecc 生成一个实现解析器的 Erlang 程序，并调用 parse/1 函数，该函数使用由分词器生成的记号作为参数。

[source, erlang]
----
5> yecc:file(yecc_json_parser), c(yecc_json_parser).
{ok,yexx_json_parser}
6> f(Json), {ok, Json} = yecc_json_parser:parse(Tokens).
{ok,#{"escapes" => "\b\n\r\t\f////",
      "format" => #{"frame rate" => 4.5,
        "height" => -1080.0,
        "interlace" => false,
        "type" => "rect",
        "unicode" => "/",
        "widths" => {1920.0,1.6e3}},
       "name" => "Jack \"Bee\" Nimble",
       "no" => 1.0}}
----

当您希望将自己的完整语言编译到 Erlang 虚拟机时，Leex 和 Yecc 工具非常适合。通过将它们与语法工具 (特别是 Merl ) 结合使用，您可以操作 Erlang 抽象语法树，以生成 Erlang 代码或更改 Erlang 代码的行为。

=== 语法工具和 Merl

语法工具是一组库，用于操作 Erlang 抽象语法树 (AST) 的内部表示。

语法工具应用程序还包括自 Erlang 18.0 以来的工具 Merl。你可以使用 Merl 来非常容易地操作语法树，并用 Erlang 代码编写解析转换。

您可以在 Erlang.org 站点上找到语法工具的文档 link:http://erlang.org/doc/apps/syntax_tools/chapter.html[http://erlang.org/doc/apps/syntax_tools/chapter.html]。

=== 编译 Elixir

在 Beam 上编写自己的编程语言的另一种方法，是使用 Elixir 中的元编程工具。Elixir 通过 Erlang 抽象语法树编译 Beam 代码。

使用 Elixir 的 defmacro，您可以直接在 Elixir 中定义您自己的领域特定语言（DSL）。

