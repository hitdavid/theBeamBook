[[CH-Beam_loader]]
== BEAM 加载器

// Translation to internal format.
//   Rewrites
//
// Linking and Exports

=== 从通用指令变换为特定指令

BEAM 加载器不只是获取外部 BEAM 格式并将其写入内存。它还对代码进行许多变换，并将外部 (通用) 格式转换为内部 (特定) 格式。

加载器的代码可以在 beam_load.c (在 +erts/emulator/beam+ ) 中找到，但是大多数翻译逻辑都在文件 ops.tab (在 +erts/emulator/beam/emu+ ) 中。

加载器的第一步是解析 beam 文件，基本上和我们在 xref:CH-beam_modules[] 中使用 Erlang 所做的工作相同，但是该程序是用 C 编写的。

然后是 ops.tab 中的规则被应用于代码块 (译注：code chuck, 见 xref:code_chunk[] ) 中的指令，以将通用指令转换为一个或多个特定指令。

翻译表通过模式匹配工作。文件中的每一行都定义了一个或多个带参数的通用指令的模式，可选的一个箭头(译注："=>" 符号)，后面跟着一个或多个要转换的指令。

ops tab 中的转换尝试处理编译器生成的指令模式，通过窥孔优化将它们优化为更少的特定指令。ops tab 转换尝试为选择的模式生成跳转表。

ops.tab 文件并不是在运行时解析的，而是从 ops.tab 生成一个模式匹配程序，并存储在生成的一个 C 文件中的数组中。perl 脚本 +beam_makeops+ (在 +erts/emulator/utils+ 中) 在 +beam_opcodes.h+ 和 +beam_opcodes.c+ 文件中生成一组特定于目标的操作码和翻译程序(这些文件在给定的目标目录中，例如  +erts/emulator/x86_64-unknown-linux-gnu/opt/smp/+)。

同一个程序 (beam_makeops) 还为编译器后端 +beam_opcodes.erl+ 生成 Erlang 代码。

=== 理解 ops.tab

https://github.com/erlang/otp/blob/OTP-23.1/erts/emulator/beam/ops.tab[`ops.tab`] 中的变换按照它们写入文件的顺序执行。因此，就像在 Erlang 模式匹配中一样，不同规则的触发顺序是自上而下的。

在 `ops.tab` 中的指令参数的类型可以在 xref:AP-Instructions[] 中可以找到。

==== 变换

`ops.tab` 中的大多数规则是不同指令之间的变换。一个简单的变换是这样的:

....
move S x==0 | return => move_return S
....

这组合了从任何位置移动到 `x(0)` 的 `move` 指令和 return 指令，成为一个名为 `move_return` 的单指令。让我们把变换分开看看不同的部分做了什么。

move:: 是模式首先要匹配的指令。这(译注：指这个位置的指令) 可以是编译器产生的通用指令，也可以是 `ops.tab` 生成的用以帮助变换的临时指令。

S:: 是一个绑定任何类型值的变量。模式中的任何值 ( `=>` 的左值)，若在产生器中使用 ( `=>` 的右值) ，都必须绑定到一个变量。

x==0:: 是一个卫兵检查，说明该模式只在目标位置是 x 寄存器且值为 0 时应用转换。这里可以链接多个类型 (译注：指多个类型的寄存器)，也可以绑定一个变量。例如， `D=xy==0`  将允许`x` 和 `y` 寄存器的值为 `0` ，并且将参数绑定到变量 `D`.。

|:: 表示属于同一模式的本条指令结束，另一条指令开始。

return:: 是该模式中要匹配的第二个指令。

`=>`:: 表示模式的结束和要生成的代码的开始。

move_return S:: 表示生成的指令的名称，以及左值变量的名称。可以使用 `|` 符号生成 https://github.com/erlang/otp/blob/OTP-23.1/erts/emulator/beam/ops.tab#L656[多条指令(multiple instructions)]，此时，本条指令将作为变换的一部分。

[[complex_example]]

一个更复杂的例子

更复杂的翻译可以在 `ops.tab` 中完成。例如，以 https://github.com/erlang/otp/blob/OTP-23.1/erts/emulator/beam/ops.tab#L142-L189[`select_val`] 指令为例。它将根据输入值，由加载器翻译到跳表，线性搜索数组，或二分搜索的数组中。

....
is_integer Fail=f S | select_val S=s Fail=f Size=u Rest=* | \
  use_jump_tab(Size, Rest) => gen_jump_tab(S, Fail, Size, Rest)
....

如果可能的话，上面的变换会为 `select_val` 创建一个跳转表。在变换中使用了很多新技术。

S:: 同时在 `is_integer` and `select_val` 中使用。这意味着这两个值必须具有相同的类型和相同的值。此外， `S=s` 卫兵检查将类型限制为源寄存器。

Rest=*:: 允许指令中的参数数目可变，并将它们绑定到变量 `Rest` 。

use_jump_tab(Size, Rest):: 调用 `beam_load.c` 中的 C 函数 https://github.com/erlang/otp/blob/OTP-23.1/erts/emulator/beam/beam_load.c#L3039[use_jump_tab]，该函数决定 `select_val` 中的参数是否可以转换为跳转表。

\:: 表示转换规则在下一行继续。

gen_jump_tab(S, Fail, Size, Rest):: 调用 `beam_load.c` 中的 C 函数 https://github.com/erlang/otp/blob/OTP-23.1/erts/emulator/beam/beam_load.c#L4039[gen_jump_tab]，该函数负责生成适当的指令。

==== 特定指令

完成所有转换后，我们必须决定特定指令应该是什么样子。让我们继续看看 `move_return`：

....
%macro: move_return MoveReturn -nonext
move_return x
move_return c
move_return n
....

这将生成三条不同的指令，它们将使用 `beam_emu.c` 中的 https://github.com/erlang/otp/blob/OTP-19.3/erts/emulator/beam/beam_emu.c#L636[`MoveReturn`] (译注，在 OTP 最新的 master 分支代码中，`MoveReturn` 已经被移出 `beam_emu.c` 在 https://github.com/erlang/otp/blob/master/erts/emulator/beam/emu/instrs.tab#L697[`instra.tab`]文件中增加了宏来处理 `move_return` ) 宏来完成这项工作。

%macro: move_return:: 告诉  `ops.tab`  为  `move_return` 生成代码。如果没有 `%macro` 这行，指令就需要在beam_emu.c 手工实现。该指令的代码将位于 `beam_hot.h` 或 `beam_cold.h` 中，具体取决于 `%hot` 或 `%cold` 哪个开关是激活的。（译注：推荐继续阅读资料：https://github.com/erlang/otp/blob/master/erts/emulator/internal_doc/beam_makeops.md[The beam_makeops script]）。

MoveReturn:: 告诉代码生成器，move_return 在 beam_emu.c 中使用的 C macro 的名称是 MoveReturn。这个宏必须手动实现。（译注：这是 OTP 19.3 的情况，最新的实现方式参考 OTP 源码和文档）

MoveReturn:: tells the code generator to that the name of the c-macro in beam_emu.c to use
is MoveReturn. This macro has to be implemented manually.



-nonext:: 告诉代码生成器不应该生成下一条指令的分派 ( dispatch )， `MoveReturn` 宏会处理这个问题。

move_return x:: 告诉代码生成器在指令参数为 x 寄存器时生成特定的指令。 `c` 是常数， `n` 是 `NIL`。在这种情况下，当参数是 y 寄存器时不会生成任何指令，因为编译器永远不会生成这样的代码。

生成的 `beam_hot.h` 代码看起来像是这样：

[source, C]
-----------------------------
OpCase(move_return_c):
    {
    MoveReturn(Arg(0));
    }

OpCase(move_return_n):
    {
    MoveReturn(NIL);
    }

OpCase(move_return_x):
    {
    MoveReturn(xb(Arg(0)));
    }
-----------------------------

实现者所要做的就是在 `beam_emu.c` 中定义 `MoveReturn` 宏，这样指令就完成了。

[[macro_arguments]]
.Macro flags

`%macro` 规则可以采用多个不同的标志来修改生成的代码。

下面的例子假设有一个类似这样的特定指令：

....
%macro move_call MoveCall
move_call x f
....

如果没有任何标志的 `%macro` ，将生成以下代码:

without any flags to the `%macro` we the following code will be generated:

[source, C]
BeamInstr* next;
PreFetch(2, next);
MoveCall(Arg(0));
NextPF(2, next);

[NOTE]
https://github.com/erlang/otp/blob/OTP-19.3/erts/emulator/beam/beam_emu.c#L519-L523[PreFetch and NextPF] 宏确保在执行指令之前加载要跳转到的地址。根据 CPU 的缓存体系结构和超级标量属性，这个技巧在所有体系结构上都有不同程度的性能提升。(译注：目前，此特性也已经被移出 beam_emu.c，详细资料和介绍可以参考 https://github.com/erlang/otp/blob/OTP-23.1/erts/emulator/internal_doc/beam_makeops.md#L1263[Code generation directives] )

-nonext:: 不要为此指令产生 dispatch。它用于已知不能继续执行下一个指令的指令，如 return，call，jump。

`%macro move_call MoveCall -nonext`
[source, C]
MoveCall(xb(Arg(0)));

-arg_*:: 包括 * 类型的参数作为 C macro 的参数。默认情况下，C macro 中并不包括所有的参数类型。例如，用于失败标签和本地函数调用的类型 `f` 不包括在内。因此，提供选项 `-arg_f` 将包括它作为 C macro 的参数。

`%macro move_call MoveCall -arg_f`
[source, C]
MoveCall(xb(Arg(0)), Arg(1));

-size:: 将指令的大小作为参数包含到 C macro 中。

`%macro move_call MoveCall -size`
[source, C]
MoveCall(xb(Arg(0)), 2);

-pack:: 如果可能的话，打包任何参数。如果可能的话，将多个寄存器参数放在同一个单词中。由于寄存器参数只能是 0-1024，所以我们只需要 10 位来存储它们，再加上 2 位来做标记。因此，在 32 位系统中，我们可以将 2 个寄存器放在一个机器字中，而在64位系统中，我们可以将 4 个寄存器放在一个机器字中。封装指令可以大大减少单个指令所使用的内存。然而，解包指令也会有一点成本，这就是为什么没有对所有指令启用它的原因。

这个调用的例子不能进行任何打包，因为 `f` 不能打包，而且只存在一个另外的参数。因此，让我们以 https://github.com/erlang/otp/blob/OTP-23.1/erts/emulator/beam/ops.tab#L553[put_list] 指令为例（译注：请同时关注这个文件中 L535-L537 的注释）。

....
%macro:put_list PutList -pack
put_list x x x
....

[source, C]
BeamInstr tmp_packed1;
BeamInstr* next;
PreFetch(1, next);
tmp_packed1 = Arg(0);
PutList(xb(tmp_packed1&BEAM_TIGHT_MASK),
        xb((tmp_packed1>>BEAM_TIGHT_SHIFT)&BEAM_TIGHT_MASK),
        xb((tmp_packed1>>(2*BEAM_TIGHT_SHIFT))));
NextPF(1, next);

这将 3 个参数打包到 1 个机器字中，从而将该指令所需的内存减半。

-fail_action:: 包括一个失败操作作为 C macro 的参数。请注意，https://github.com/erlang/otp/blob/OTP-19.3/erts/emulator/beam/beam_emu.c#L2996-L2998[`ClauseFail()`] 宏假设失败标签在指令的第一个参数中，因此，为了在上面的示例中使用它，我们应该将 `move_call x f` 变换为 `move_call f x`。

`%macro move_call MoveCall -fail_action`
[source, C]
MoveCall(xb(Arg(0)), ClauseFail());

-gen_dest:: 包括一个 https://github.com/erlang/otp/blob/OTP-19.3/erts/emulator/beam/beam_emu.c#L166-L174[store function] 作为 C macro 的参数。

`%macro move_call MoveCall -gen_dest`
[source, C]
MoveCall(xb(Arg(0)), StoreSimpleDest);

-goto:: 用跳到 beam_emu.c 中的 c-label 替换正常的下一个分派

`%macro move_call MoveCall -goto:do_call`
[source, C]
MoveCall(xb(Arg(0)));
goto do_call;

=== 优化

加载器在加载代码时执行许多窥孔优化。其中最重要的是指令组合和指令专门化。

指令组合是将两条或多条较小的指令合并成一条较大的指令。如果已知这些指令大部分时间都是相互跟随的，那么这可能会导致代码的速度大大加快。之所以能够加快速度，是因为不再需要在指令之间执行分派 ( dispatch，译注：参见 xref:SEC-Dispatch_directly_threaded_code[] )，而且 C 编译器在优化指令时可以获得更多信息。何时执行指令组合是一种权衡，必须考虑主仿真器循环增大的大小与执行指令时的增益之间的影响。

指令专门化消除了对指令中的参数进行解码的需要。因此，用已经解码的参数生成的将不是一条 `move_sd` ，而是 `move_xx`， `move_xy` 等指令。这减少了指令的解码成本，但这也是对仿真器代码大小的权衡考量。

==== select_val 优化

编译器生成 `select_val` 指令来对许多函数或 case 子句进行控制流处理。例如：

[source, erlang]
select(1) -> 3;
select(2) -> 3;
select(_) -> error.

编译为：

[source, erlang]
{function, select, 1, 2}.
  {label,1}.
    {line,[{location,"select.erl",5}]}.
    {func_info,{atom,select},{atom,select},1}.
  {label,2}.
    {test,is_integer,{f,4},[{x,0}]}.
    {select_val,{x,0},{f,4},{list,[{integer,2},{f,3},{integer,1},{f,3}]}}.
  {label,3}.
    {move,{integer,3},{x,0}}.
    return.
  {label,4}.
    {move,{atom,error},{x,0}}.
    return.

条件中的值只能是整数或原子。如果值是任何其他类型的，编译器将不会生成 `select_val`  指令。加载器使用两个侦听器来确定在执行 `select_val` 时使用什么类型的算法。

jump_on_val:: 创建一个跳转表并使用该值作为索引。在使用一组相近的整数作为选择值时是非常有效的。如果不是所有的值都存在，则用额外的失败标签槽填充跳转表。

select_val2:: 当只有两个值被选中时，他们不适合跳表时使用。

select_val_lins:: 对已排序的原子或整数进行线性搜索。当需要从少量的原子或整数中选择时使用。

select_val_bins:: 对已排序的原子或整数进行二分搜索。

==== 字面值预哈希

当加载一个字面值并将其用作任何需要字面值 hash 值的 bifs 或指令的参数时，该 hash 值由加载器创建并由指令使用，而不是每次都对字面值进行 hash。

使用这种技术的代码示例有 maps 指令和进程字典 (PD) bifs。

