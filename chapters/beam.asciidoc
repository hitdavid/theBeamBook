[[CH-BEAM]]
== Erlang 虚拟机: BEAM

BEAM  (Bogumil / Björn 抽象机)是在 Erlang 运行时系统中执行代码的机器。它是一台垃圾收集，规约值计数，虚拟，非抢占式，直接线程，寄存器式机器。如果这还不能说明什么，不用担心，在接下来的部分中，我们将介绍这些单词在此上下文中的含义。

虚拟机 BEAM 位于 Erlang 节点的核心。执行 Erlang 代码的是 BEAM。也就是说，是 BEAM 执行您的应用程序代码。理解 BEAM 是如何执行代码的，对于配置和调优您的代码至关重要。

BEAM 的设计对 BEAM 的其他部分有很大的影响。用于调度的原语会影响调度器 ( xref:CH-Scheduling[] )，Erlang 短语的表示以及与内存的交互会影响垃圾收集器 ( xref:CH-Memory[] )。通过理解 BEAM 的基本设计，您将更容易理解这些其他组件的实现。

=== 工作内存: 堆栈机？并不是！

与它的前身 JAM (Joe 's Abstract Machine) 是一个堆栈机不同，BEAM 是一个基于WAM <<warren>> 的寄存器机器。在堆栈机器中，指令的每个操作数首先被推入工作堆栈，然后指令弹出它的参数，然后将结果推入堆栈。

堆栈机在虚拟机和编程语言实现者中非常流行，因为它们很容易为其生成代码，而且代码变得非常紧凑。编译器不需要做任何寄存器分配，并且大多数操作不需要任何参数(在指令流中)。

编译表达式 "8 + 17 * 2." 到堆栈机器可以产生如下代码：

----
push 8
push 17
push 2
multiply
add
----

此代码可以直接从表达式的解析树生成。通过使用 Erlang 表达式和 https://erlang.org/doc/man/erl_scan.html[+erl_scan+]  和 https://erlang.org/doc/man/erl_parse.html[+erl_parse+] 模块，我们可以构建世界上最简单的编译器。

[source,erlang]
-------------------------------------------
compile(String) ->
    [ParseTree] = element(2,
			  erl_parse:parse_exprs(
			    element(2,
				    erl_scan:string(String)))),
    generate_code(ParseTree).

generate_code({op, _Line, '+', Arg1, Arg2}) -> 
    generate_code(Arg1) ++ generate_code(Arg2) ++ [add];
generate_code({op, _Line, '*', Arg1, Arg2}) -> 
    generate_code(Arg1) ++ generate_code(Arg2) ++ [multiply];
generate_code({integer, _Line, I}) -> [push, I].
-------------------------------------------

和一个更简单的虚拟堆栈机：

[source,erlang]
-------------------------------------------
interpret(Code) -> interpret(Code, []).

interpret([push, I |Rest], Stack)              -> interpret(Rest, [I|Stack]);
interpret([add     |Rest], [Arg2, Arg1|Stack]) -> interpret(Rest, [Arg1+Arg2|Stack]);
interpret([multiply|Rest], [Arg2, Arg1|Stack]) -> interpret(Rest, [Arg1*Arg2|Stack]);
interpret([],              [Res|_])            -> Res.
-------------------------------------------

And a quick test run gives us the answer:

[source,erlang]
-------------------------------------------
1> stack_machine:interpret(stack_machine:compile("8 + 17 * 2.")).
42
-------------------------------------------

很好，您已经构建了您的第一个虚拟机！如何处理减法、除法和 Erlang 语言的其他部分留给读者作为练习。

无论如何，BEAM *不是* 一个堆栈机，它是一个寄存器机器。在寄存器中，机器指令操作数存储在寄存器中而不是堆栈中，操作的结果通常在一个特定的寄存器中结束。

大多数寄存器机器仍然有一个用于向函数传递参数和保存返回地址的栈。BEAM 既有栈也有寄存器，但就像 WAM 一样，堆栈槽只可以通过称为 Y 寄存器（Y-registers）的寄存器访问。BEAM 也有一些 X 寄存器（X-registers）和一个特殊功能寄存器 X0 (有时也称为R0)，它作为一个存储结果的累加器。

X 寄存器用作函数调用的参数寄存器，而寄存器 X0 用于存储返回值。

X 寄存器存储在 BEAM 模拟器的 c 数组中，可以从所有函数全局地访问它们。X0 寄存器缓存在一个本地变量中，该变量映射到大多数体系结构中本机上的物理机器寄存器。

Y 寄存器存储在调用方的堆栈框架中，仅供调用函数访问。为了跨函数调用保存一个值，BEAM 在当前栈帧中为它分配一个栈槽，然后将该值移动到Y寄存器。

[[x_and_y_regs_in_memory]]
.X and Y Registers in Memory
[ditaa]
----
  hend ->  +----+    -
           |....|
  (fp) ->  | AN |
  (y0) ->  |    |
  (y1) ->  |    |
  stop ->  |    |
           |    |
           |    |
  htop ->  |    |
           |....|
           |....|
  heap ->  +----+

           +----+
   X1000   |    |
    X999   |    |
   ...      .... 
      X2   |    |
      X1   |    |
     (X0)  |    |
           +----+
----

我们使用 _'S'_ flag 编译以下程序：

[source,erlang]
------------------------------------------
-module(add).
-export([add/2]).

add(A,B) ->  id(A) + id(B).

id(I) -> I.
------------------------------------------

之后，我们对 add 函数，得到了如下代码：

[source,erlang]
------------------------------------------
{function, add, 2, 2}.
  {label,1}.
    {func_info,{atom,add},{atom,add},2}.
  {label,2}.
    {allocate,1,2}.
    {move,{x,1},{y,0}}.
    {call,1,{f,4}}.
    {move,{x,0},{x,1}}.
    {move,{y,0},{x,0}}.
    {move,{x,1},{y,0}}.
    {call,1,{f,4}}.
    {gc_bif,'+',{f,0},1,[{y,0},{x,0}],{x,0}}.
    {deallocate,1}.
    return.
------------------------------------------

在这里，我们可以看到代码 (从 label 2 开始) 首先分配了一个栈槽，以获得空间来保存函数调用 `id(A)` 上的参数 `B`。然后该值由指令 `{move,{x,1},{y,0}}` 保存 (读做：将 `x1` 移动到 `y0` 或以命令式方式： `y0:= x1`)。

id 函数(在标签 f4 )然后被 `{call,1,{f,4}}` 调用。(我们稍后会了解参数 “1” 代表什么) 然后调用的结果(现在在 `X0` 中) 需要保存在堆栈 (`Y0`) 上，但是参数 `B` 保存在 `Y0` 中，所以 BEAM 做了一点变换：

除 x 和 y 寄存器外，还有一些特殊功能寄存器：

.Special Purpose Registers
* Htop - The top of the heap.（堆顶）
* E - The top of the stack. （栈顶）
* CP - Continuation Pointer, i.e. function return address （接续点）
* I - instruction pointer （指令指针）
* fcalls - reduction counter （规约值计数器）

这些寄存器是 PCB 中相应字段的缓存版本。

------------------------------------------
    {move,{x,0},{x,1}}. % x1 := x0 (id(A))
    {move,{y,0},{x,0}}. % x0 := y0 (B)
    {move,{x,1},{y,0}}. % y0 := x1 (id(A))
------------------------------------------

现在我们在 `x0` 中有了第二个参数 `B` (第一个参数寄存器)，我们可以再次调用 `id` 函数 `{call,1,{f,4}}`。

在调用后，x0 包含 `id(B)`，`y0` 包含 `id(A)`，现在我们可以进行加法操作：`{gc_bif,'+',{f,0},1,[{y,0},{x,0}],{x,0}}`。(稍后我们将详细讨论 BIF 调用和 GC。)

[[SEC-Dispatch_directly_threaded_code]]

=== 分派(Dispatch)：直接线程代码

BEAM 中的指令译码器是用一种被称为直接线程（ _directly threaded_ ）代码的技术实现的。在这个上下文中，线程 _thread_ 这个词与操作系统线程、并发性或并行性没有任何关系。它是通过虚拟机本身线程化的执行路径。

如果我们看一下上文所示的处理算术表达式的朴素堆栈机，就会发现我们使用 Erlang 原子和模式匹配来解码要执行的指令。这是一个非常重的解码机器指令的机器。在实际机器中，我们将每条指令编码为一个 “机器字” 整数。

我们可以使用 C 语言，将堆栈机重写为 _字节码_（ _byte code_ ）机。首先，我们重写编译器，使其产生字节码。这是非常直接的，只需将每条被编码为 atom 的指令替换为表示该指令的字节。为了能够处理大于 255 的整数，我们将整数编码为一个存储大小 ( size ) 的字节，后面接的是用字节编码的整数数值。

[source,erlang]
-------------------------------------------
compile(Expression, FileName) ->
    [ParseTree] = element(2,
			  erl_parse:parse_exprs(
			    element(2,
				    erl_scan:string(Expression)))),
    file:write_file(FileName, generate_code(ParseTree) ++ [stop()]).

generate_code({op, _Line, '+', Arg1, Arg2}) -> 
    generate_code(Arg1) ++ generate_code(Arg2) ++ [add()];
generate_code({op, _Line, '*', Arg1, Arg2}) -> 
    generate_code(Arg1) ++ generate_code(Arg2) ++ [multiply()];
generate_code({integer, _Line, I}) -> [push(), integer(I)].

stop()     -> 0.
add()      -> 1.
multiply() -> 2.
push()     -> 3.
integer(I) ->    
    L = binary_to_list(binary:encode_unsigned(I)),
    [length(L) | L].
-------------------------------------------
现在让我们用 C 语言编写一个简单的虚拟机。完整的代码可以在 xref:AP-listings[] 中找到。

[source,c++]
-------------------------------------------
#define STOP 0
#define ADD  1
#define MUL  2
#define PUSH 3

#define pop()   (stack[--sp])
#define push(X) (stack[sp++] = X)

int run(char *code) {
  int stack[1000];
  int sp = 0, size = 0, val = 0;
  char *ip = code;

  while (*ip != STOP) {
    switch (*ip++) {
    case ADD: push(pop() + pop()); break;
    case MUL: push(pop() * pop()); break;
    case PUSH:
      size = *ip++; 
      val = 0;
      while (size--) { val = val * 256 + *ip++; }
      push(val);
      break;
    }
  }
  return pop();
}
-------------------------------------------

你看，用  C 语言写的虚拟机不需要非常复杂。这台机器只是一个循环，通过查看指令指针 ( _instruction pointer_ , `ip`) 指向的值来检查每条指令的字节码。

对于每个字节码指令，它将通过指令字节码分支跳转，跳到对应指令的 case 上执行指令。这需要对指令进行解码，然后跳转到正确的代码上。如果我们看一下vsm.c (+gcc -S vsm.c+) 的汇编指令，我们可以看到解码器的内部循环：

[source,assembly]
-------------------------------------------
L11:
        movl    -16(%ebp), %eax
        movzbl  (%eax), %eax
        movsbl  %al, %eax
        addl    $1, -16(%ebp)
        cmpl    $2, %eax
        je      L7
        cmpl    $3, %eax
        je      L8
        cmpl    $1, %eax
        jne     L5
-------------------------------------------

它必须将字节代码与每个指令代码进行比较，然后执行条件跳转。在一个指令集中有许多指令的真实机器中，这可能会变得相当昂贵。

更好的解决方案是有一个包含代码地址的表，这样我们就可以在表中使用索引来加载地址并跳转，而不需要进行比较。这种技术有时称为 _标记线程代码_ ( _token threaded code_ )。更进一步，我们可以将实现指令的函数的地址存储在代码内存中。这叫做 _子程序线程代码_ ( _subroutine threaded code_ )。

这种方法将使在运行时解码更简单，但它使整个VM更加复杂，因为它需要一个加载器。加载程序将字节代码指令替换为实现指令的函数的地址。

一个加载器可能看起来像这样：

[source, C]
-------------------------------------------
typedef void (*instructionp_t)(void);

instructionp_t *read_file(char *name) {
  FILE *file;
  instructionp_t *code;
  instructionp_t *cp;
  long  size;
  char ch;
  unsigned int val;

  file = fopen(name, "r");

  if(file == NULL) exit(1);

  fseek(file, 0L, SEEK_END);
  size = ftell(file);
  code = calloc(size, sizeof(instructionp_t));	
  if(code == NULL) exit(1);
  cp = code;

  fseek(file, 0L, SEEK_SET);	
  while ( ( ch = fgetc(file) ) != EOF ) 
    {
      switch (ch) {
      case ADD: *cp++ = &add; break;
      case MUL: *cp++ = &mul; break;
      case PUSH:
	*cp++ = &pushi; 
	ch = fgetc(file); 
	val = 0;
	while (ch--) { val = val * 256 + fgetc(file); } 
	*cp++ = (instructionp_t) val;
	break;
      }
    }
  *cp = &stop;

  fclose(file);
  return code;
}
-------------------------------------------

正如我们所看到的，我们在加载时做了更多的工作，包括对大于255的整数进行解码。(是的，我知道，以上代码对于非常大的整数是不安全的。)

如此，解码和分派循环的VM变得相当简单：

[source, C]
-------------------------------------------
int run() {
  sp = 0;
  running = 1;

  while (running) (*ip++)();

  return pop();
}
-------------------------------------------

然后我们只需要实现这些指令：

[source, C]
-------------------------------------------
void add()  { int x,y; x = pop(); y = pop(); push(x + y); }
void mul()  { int x,y; x = pop(); y = pop(); push(x * y); }
void pushi(){ int x;   x = (int)*ip++;       push(x); }
void stop() { running = 0; }
-------------------------------------------

在 BEAM 中，这个概念更进一步，BEAM使用直接线程代码(_directly threaded code_ 有时也被称为 _thread code_ )。在直接线程代码中，调用和返回序列被直接跳转到下一条指令的实现所取代。为了在 C 语言中实现这一点，BEAM 使用了 GCC "labels as values" 扩展。

稍后我们将进一步研究 BEAM 模拟器，但我们将快速了解 add 指令是如何实现的。由于大量使用宏，代码有些难以理解。这个 `STORE_ARITH_RESULT` 宏实际上隐藏了一个看起来像：`I += 4; Goto(*I);` 的分派函数。

[source, C]
-------------------------------------------
#define OpCase(OpCode)    lb_##OpCode
#define Goto(Rel) goto *(Rel)

...

 OpCase(i_plus_jId):
 {
     Eterm result;

     if (is_both_small(tmp_arg1, tmp_arg2)) {
     Sint i = signed_val(tmp_arg1) + signed_val(tmp_arg2);
     ASSERT(MY_IS_SSMALL(i) == IS_SSMALL(i));
     if (MY_IS_SSMALL(i)) {
         result = make_small(i);
         STORE_ARITH_RESULT(result);
     }
     
     }
     arith_func = ARITH_FUNC(mixed_plus);
     goto do_big_arith2;
 }
-------------------------------------------

为了让我们更容易理解 BEAM 分派器是如何实现的，让我们举一个更形象的例子。我们将从一些真正的 external BEAM 代码开始，然后我会发明一些 internal BEAM 指令，并用 C 实现它们。

如果我们从 Erlang 中一个简单的 add 函数开始：

[source, Erlang]
-------------------------------------------
add(A,B) -> id(A) + id(B).
-------------------------------------------

编译为 BEAM 码后如下：

[source, Erlang]
-------------------------------------------
{function, add, 2, 2}.
  {label,1}.
    {func_info,{atom,add},{atom,add},2}.
  {label,2}.
    {allocate,1,2}.
    {move,{x,1},{y,0}}.
    {call,1,{f,4}}.
    {move,{x,0},{x,1}}.
    {move,{y,0},{x,0}}.
    {move,{x,1},{y,0}}.
    {call,1,{f,4}}.
    {gc_bif,'+',{f,0},1,[{y,0},{x,0}],{x,0}}.
    {deallocate,1}.
    return.
-------------------------------------------

(完整代码见  xref:AP-listings[]  中的 add.erl 和 add.S。)

现在，如果我们聚焦这段代码中函数调用的三条指令：

[source, Erlang]
-------------------------------------------
    {move,{x,0},{x,1}}.
    {move,{y,0},{x,0}}.
    {move,{x,1},{y,0}}.
-------------------------------------------

这段代码首先将函数调用  (`x0`)  的返回值保存在一个新的寄存器 (`x1`) 中。然后，它将调用者保存寄存器 (`y0`)  移动到第一个参数寄存器 (`x0`)。最后，它将 x1 中保存的值移动到调用者保存寄存器 (`y0`) ，以便在下一个函数调用时依旧存活。

假设我们要在 BEAM 中实现三条指令 +move_xx+, +move_yx+, 和 +move_xy+  ( 这些指令在 BEAM 中不存在，我们只是用它们来演示这个例子)：

[source, C]
-------------------------------------------
#define OpCase(OpCode)    lb_##OpCode
#define Goto(Rel) goto *((void *)Rel)
#define Arg(N) (Eterm *) I[(N)+1]


  OpCase(move_xx):
  {
     x(Arg(1)) = x(Arg(0));
     I += 3;
     Goto(*I);
  }

  OpCase(move_yx): {
    x(Arg(1)) = y(Arg(0));
    I += 3;
    Goto(*I);
  }


  OpCase(move_xy): {
    y(Arg(1)) = x(Arg(0));
    I += 3;
    Goto(*I);
  }

-------------------------------------------

注意，`+goto *+` 中的星号并不意味着解引用，该表达式意味着跳转到地址指针，我们实际上应该将其写为 `+goto*+`。

现在假设这些指令的编译后的 C 代码最终被加载在内存地址 0x3000、0x3100 和 0x3200中。当 BEAM 码被加载时，三个移动指令中的代码将被执行指令的内存地址所取代。假设代码 (`+{move,{x,0},{x,1}}, {move,{y,0},{x,0}}, {move,{x,1},{y,0}}+`) 被加载到地址 0x1000：

-------------------------------------------
                     /  0x1000: 0x3000 -> 0x3000: OpCase(move_xx): x(Arg(1)) = x(Arg(0))
{move,{x,0},{x,1}}  {   0x1004: 0x0                                I += 3;
                     \  0x1008: 0x1                                Goto(*I);
                     /  0x100c: 0x3100
{move,{y,0},{x,0}}  {   0x1010: 0x0
                     \  0x1014: 0x0
                     /  0x1018: 0x3200
{move,{x,1},{y,0}}  {   0x101c: 0x1
                     \  0x1020: 0x0
-------------------------------------------

地址 0x1000 处的一个"字"指向 move_xx 指令的实现。如果寄存器 `I` 包含指向 0x1000 的指令指针，那么分派器将会去获取  `+*I+`( 即 0x3000 ) 并跳转到那个地址。 (`+goto* *I+`)

在 xref:CH-Instructions[] 中，我们将更深入地研究一些真实的 BEAM 指令以及它们是如何实现的。

=== 调度：非抢占，规约值计数

大多数现代多线程操作系统使用抢占式调度。这意味着操作系统决定何时从一个进程切换到另一个进程，而不管进程在做什么。这可以保护其他进程不受某个进程行为不当(例如：没有及时做出让步)的影响。

在使用非抢占式调度器的协作多任务中，运行的进程决定何时让步。这样做的好处是，让步过程可以在已知状态下完成。

例如，在像 Erlang 这样具有动态内存管理和类型标记值的语言中，实现可能被设计成只有在工作内存中没有 ”解除标记 ( untagged )“ 值时进程才会产生进程调度让步。

以 add 指令为例，要添加两个 Erlang 整数，仿真器首先必须解除对整数的标记（译注：值的类型标记被记录在变量所占内存中，要取得整数值，需要先把标签去除），然后将它们相加，然后将结果标记为（译注：增加标签）整数。如果使用了完全抢占式的调度程序，则无法保证在未标记整数时进程不会挂起。或者进程在堆上创建元组时被挂起，只剩下半个元组。这将使遍历挂起的进程堆栈和堆变得非常困难。

在语言级别上，所有进程都是并发运行的，程序员不应该处理显式的调度让步。BEAM 通过跟踪进程运行了多长时间来解决这个问题。这是通过计算规约值来实现的。这个术语最初来自于微积分中使用的数学术语：lambda 演算中使用的 beta-reduction。

BEAM 中规约值的定义并不是很明确，但我们可以把它看作是一小块工作，不会花太长时间 ( _too long_ )。每个函数调用都被视为一次规约计数。BEAM 在进入每个函数时都要做一个测试，以检查进程是否耗尽了所有的规约值。如果有剩余的规约值，函数将被执行，否则进程将被挂起。

由于 Erlang 中没有循环，只有尾部递归函数调用，所以很难编写一个不消耗掉规约计数而完成大量工作的程序。

[WARNING]
====

有些 BIFs 只使用 1 个规约计数就可以运行很长时间，比如 +term_to_binary+ 和 +binary_to_term+。请确保调用这些BIFs时，只使用小项式或 binary，否则可能会将调度器锁定很长一段时间。

另外，如果您编写自己的 NIFs，请确保它们能够产生让步，并与运行时间成比例地使规约值减少。
====

我们将在 xref:CH-Scheduling[] 中详细介绍调度器的工作方式。

=== 内存管理：垃圾收集

Erlang 支持垃圾回收；作为 Erlang 程序员，您不需要执行显式内存管理。在 BEAM 层面，代码负责检查栈和堆溢出，并在栈和堆上分配足够的空间。

BEAM 指令 https://github.com/erlang/otp/blob/OTP-23.0/lib/compiler/src/genop.tab#L118[+test_heap+] 将确保堆上有足够的空间满足需求。如果需要，该指令将调用垃圾收集器来回收堆上的空间。垃圾收集器将依次调用内存子系统的更底层实现来根据需要分配或释放内存。我们将在 xref:CH-Memory[] 中详细介绍内存管理和垃圾收集。

=== BEAM: 一个虚拟机

BEAM 是一个虚拟机，也就是说它是用软件而不是硬件实现的。已经有项目通过 FPGA 实现 BEAM，同样也没有什么可以阻止任何人在硬件上实现 BEAM。一个更好的描述可能是称 BEAM 为一个抽象的机器，并把它看作可以执行 BEAM 代码的机器的蓝图。事实上，BEAM 中的 "AM" 两个字母就代表 “抽象机器”。

在本书中，我们将不区分抽象机器，虚拟机或它们的实现。在更正式的设定中，抽象机器是计算机的理论模型，虚拟机是抽象机器的软件实现，或者是真实物理机器的软件仿真器。

不幸的是，目前还没有关于 BEAM 的官方规范，它目前仅由 Erlang/OTP 中的实现定义。如果您想实现您自己的 BEAM，您就必须尝试模拟当前的实现，而不知道哪些部分是必要的，哪些部分是偶然的。你必须模仿每一个可观察的行为，以确保你有一个有效的 BEAM 解释器。

****

*TODO:* Conclusion and handover to the chapters on instructions.

****
