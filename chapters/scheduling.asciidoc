[[CH-Scheduling]]
== 调度

要完全理解在 ERTS 系统中时间花在何处，您需要理解系统如何决定运行哪个 Erlang 代码以及何时运行它。这些决定是由调度器做出的。

调度程序负责系统的实时性保证。在计算机科学对 “*实时*” 一词的严格定义中，实时系统必须能够保证在指定的时间内作出响应。也就是说，有真正的截止日期，每个任务都必须在最终期限之前完成。在 Erlang 中没有这样的保证，只保证超时*不会* 在给定的最终期限 *之前* 触发。

在像 Erlang 这样的通用系统中，我们希望能够处理各种程序和负载，所以调度器将不得不做出一些妥协。总会有一些极端情况，在这些情况下，通用的调度器的行为会变得很糟糕。阅读完本章后，您将对 Erlang 调度器的工作方式有更深的理解，特别是当它可能不在最佳状态工作时。你应该能够设计你的系统以避免极端情况，还应该能够分析行为不正常的系统。

=== 并发、并行，抢占式多任务

Erlang 是一种并发语言。当我们说进程并发运行时，我们的意思是：对于一个外部观察者来说，它看起来像是两个（译注：或多个）进程同时在执行。在单核系统中，这是通过抢占式多任务实现的。这意味着一个进程将运行一段时间，然后虚拟机的调度器将挂起它，让另一个进程运行。

在多核或分布式系统中，我们可以实现真正的并行性，即两个或多个进程实际上同时执行。在启用SMP的仿真器中，系统使用几个操作系统线程来间接地执行Erlang进程，每个线程运行一个调度程序和仿真器。在使用ERTS默认设置的系统中，每个启用的核心 (物理核心或超线程) 将有一个线程。

通过检查是否启用了 SMP 支持，我们可以检查我们有一个能够支持并行执行的系统：

----
iex(1)> :erlang.system_info :smp_support
true
----

We can also check how many schedulers we have running in the
system:

----
iex(2)> :erlang.system_info :schedulers_online
4
----
（译注：上边的两个例子使用了 Elixir Shell，其实在 Erlang Shell 操作应该更简单直接，在译者机器上的运行情况如下：）
----
bash> erl

Erlang/OTP 23 [erts-11.0.3] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [hipe] [dtrace]

Eshell V11.0.3  (abort with ^G)
1> erlang:system_info(smp_support).
true
2> erlang:system_info(schedulers_online).
8
----

我们可以在 Observer 中看到如下图所示的信息。

如果我们生成了比现有的调度器更多的进程，并让它们做一些繁忙的工作，我们可以看到有许多进程在并行运行 ( _running_ )，还有一些进程是可运行 ( _runnable_ ) 的，但目前没有运行。我们可以通过函数 `erlang:process_info/2` 看到这一点。

----

1> Loop = fun (0, _) -> ok; (N, F) -> F(N-1, F) end,
   BusyFun = fun() -> spawn(fun () -> Loop(1000000, Loop) end) end,
   SpawnThem = fun(N) -> [ BusyFun() || _ <- lists:seq(1, N)] end,
   GetStatus = fun() -> lists:sort([{erlang:process_info(P, [status]), P}
                        || P <- erlang:processes()]) end,
   RunThem = fun (N) -> SpawnThem(N), GetStatus() end,
   RunThem(8).

[{[{status,garbage_collecting}],<0.62.0>},
 {[{status,garbage_collecting}],<0.66.0>},
 {[{status,runnable}],<0.60.0>},
 {[{status,runnable}],<0.61.0>},
 {[{status,runnable}],<0.63.0>},
 {[{status,runnable}],<0.65.0>},
 {[{status,runnable}],<0.67.0>},
 {[{status,running}],<0.58.0>},
 {[{status,running}],<0.64.0>},
 {[{status,waiting}],<0.0.0>},
 {[{status,waiting}],<0.1.0>},

...
----

在本章的后面，我们将进一步研究进程可能具有的各种状态，但现在我们需要知道的是正在运行或垃圾收集 ( _running_ 或 _garbage_collecting_ ) 的进程，实际上正在调度器中运行。由于示例中的机器有 4 个核和 4 个调度器，因此有 4 个进程并行运行 ( shell 进程和 3 个繁忙的进程 )。还有 5 个忙碌的进程以 runnable 状态等待运行。

通过使用 Observer 中的 _Load Charts_ 选项卡，我们可以看到在繁忙的进程执行时，所有 4 个调度器都已满负载。

----
observer:start().
ok

3> RunThem(8).
----

image::../images/observer_load.jpg[Observer]

=== 在 C 层面上的协作的 ERTS 抢占式多任务

Erlang 级别的抢占式多任务，是通过 C 语言级别的协作多任务来实现的。Erlang 语言、编译器和虚拟机一起工作，以确保 Erlang 进程的执行将在有限的时间内完成，并让下一个进程运行。用于测量和限制允许执行时间的技术称为规约值计数，我们接下来将看到有关规约值计数的所有细节。

=== 规约值

人们可以将 BEAM 中的调度描述为：在协同调度之上的抢占式调度。进程只能在执行的某些时刻被挂起，例如在 receive 或函数调用时。这样，调度是协作的---进程必须执行允许挂起的代码。Erlang 代码的特性使得进程在不执行函数调用时，几乎不可能长时间运行。有一些内建函数 ( BIFs ) 仍然可能花费很长时间而不会让步。另外，如果调用实现糟糕的本地实现函数 (NIF, Native Implemented Function) 中的 C 代码，也可能会长时间阻塞一个调度器。我们将在 xref:CH-C[] 中看到如何编写表现良好的NIFs。

由于除了递归和列表解析式 ( list comprehension ) 之外没有其他的循环结构，因此不进行函数调用就不可能永远循环。每个函数调用都被算作一次 `规约`；当进程的规约值减少达到下限时，它将被挂起。

[NOTE]
.版本信息
====
在 OTP-20.0之前的版本，`CONTEXT_REDS` 的值曾经被设置为 2000.
====

[NOTE]
.规约 ( Reductions )
====
规约这个术语来自 Erlang 的祖先 Prolog。在 Prolog 中，每个执行步骤都是一个目标规约 (goal-reduction)，每个步骤都将一个逻辑问题简化为它的组成部分，然后尝试解决每个部分。
====

==== 你能得到多少规约值？

当进程被调度时，它将获得 `CONTEXT_REDS` (在 https://github.com/erlang/otp/blob/OTP-23.1/erts/emulator/beam/erl_vm.h#L39[erl_vm.h] 中定义，当前值为4000) 定义的一个规约值。在用尽规约值，执行 receive 并且在收件箱中没有匹配的消息时，该进程将被挂起，另一个进程将被调度。

如果 VM 已经执行了 `INPUT_REDUCTIONS` 定义的规约次数(当前是 `2*CONTEXT_REDS`，也在 +erl_vm.h+ 中定义)，或者没有进程 ready，调度器将执行系统级活动。也就是检查IO；我们稍后会详细了解。

==== 规约值究竟是啥？

规约是什么还没有完全定义，但至少每个函数调用都应该算作规约。当谈到 BIFs 和 NIFs 时，事情变得有点复杂。如果不使用规约值和让步 ( yield )，进程不应该能够运行“很长时间”。用 C 编写的函数不能在中间产生让步，它必须确保它处于干净的状态并返回。为了可重入，它必须在返回之前保存它的内部状态，然后在再次进入时再次设置状态。这样做的代价会非常大，特别是对于一个有时只做少量工作，有时做大量工作的函数来说。用 C 而不是 Erlang 编写函数的原因通常是为了获得性能收益，并且不需要做不必要的簿记工作。由于除了 Erlang 级别上的函数调用之外，对于什么是一次 规约 没有明确的定义，因此存在这样的风险：用 C 实现的函数在每次规约时比普通的 Erlang 函数花费更多的时钟周期。这可能会导致调度器不平衡，甚至导致资源饥饿。

例如，在 R16 之前的 Erlang 版本中，BIFs 的 `binary_to_term/1` 和 `term_to_binary/1` 是不让步的，并且只算一次规约。这意味着以特大项式 (为参数) 调用这些函数的进程可能会饿死其他进程。因为调度器之间的进程平衡方式，这种情况甚至可能发生在 SMP 系统中，我们很快就会讲到。

当进程运行时，仿真器在 (寄存器映射) 变量 `FCALLS` 中保留要执行的规约数 (参见 +beam_emu.c+)。

在 Elixir 中，我们可以用  `hipe_bifs:show_pcb/1` 检查这个值：

----
iex(13)> :hipe_bifs.show_pcb self
 P: 0x00007efd7c2c0400
 -----------------------------------------------------------------
 Offset| Name          |              Value |             *Value |
     0 | id            | 0x00000270000004e3 |                    |

 ...

   328 | rcount        | 0x0000000000000000 |                    |
   336 | reds          | 0x000000000000a528 |                    |

 ...

   320 | fcalls        | 0x00000000000004a3 |                    |
----

[NOTE]

译注：如果以上命令无法执行，可以使用 erlang:process_info(self()). 查看 reductions 的值

`reds` 字段会追踪进程在最后一次挂起之前所完成的规约总数。通过监视这个数字，您可以看到哪些进程做了最多的工作。

你可以通过调用 `erlang:process_info/2` 并将第二个参数设置为 reductions 原子，来查看进程的规约值总数。你还可以在 observer 的 process 选项卡中，或在 Erlang shell 中的 i/0 命令中看到这个数字。

如前所述，每当进程启动时，字段 `fcalls` 被设置为 `CONTEXT_REDS` 的值，并且进程执行每个函数调用的时候， `fcalls` 将减少1。当进程被挂起时，reds 字段会随着执行的减少数量而增加。用类似 C 的代码描述，类似： `p -> reds += (CONTEXT_REDS - p -> fcalls)`。

通常进程会执行所有分配的规约数，此时 `fcalls` 为0，但是如果进程在 receive 中挂起等待消息，那么它还会留下一些规约数未用尽。

当一个进程用尽它的所有规约数，他会让步给另一个进程运行，这时，它将从进程状态 _running_ 变为状态 _runnalbe_ ，如果它在执行 receive 时让步，它将进入 _waiting_ 状态(等待消息)。在下一节中，我们将查看进程可能处于的所有不同状态。

=== 进程状态

PCB 中的 `status` 字段包含进程状态。它可以是  _free_, _runnable_, _waiting_, _running_, _exiting_, _garbing_,
和 _suspended_ 中的一种。当进程退出时,它被标记为 _free_ ---你不应该能够看到一个在这种状态下的进程，对于系统的其他部分而言，这是一种短暂的状态，进程不再存在，但仍有一些清理工作要做 (释放内存和其他资源)。

每个进程状态都是在进程状态机中的一个状态。超时或传递的消息等事件会沿着状态机的边缘触发转换。进程状态机是这样的：

[[process_state_machine]]
.进程状态机

[ditaa]
----

                               +-----------+
                               |   free    |
              +-----------+    |           |
          /---> suspended |    +-----^-----+
          | /-+           |          |
          | | ++-------^^-+    +-----+-----+
          | |  |       ||      |  exiting  |
          | |  |       ||      |           |
          | |  |resume ||      +-----^-----+
          | |  |       ||suspend     |
          | |  |       |\---------\  |
          | |  |       |          |  | exit
          | |  |       |          |  |
          | | +v-------+--+    +--+--+-----+   GC   +-----------+
          | | | runnable  +---->  running  +-------->  garbing  |
          | | |           |    |           <--------+           |
          | | +--^-----^--+    +-----+-----+        +-----------+
          | |    |     |             |
          | |    |msg  |timeout      | receive
          | |    |     |             |
          | |    |     |       +-----v-----+
          | |    |     \-------+  waiting  |
          | |    \-------------+           |
          | |                  +---^---+---+
          | |resume                |   |
          | \----------------------/   |suspend
          \----------------------------/

----

进程的正常状态是 _runnable_，_waiting_，和 _running_。 处于 _running_ 状态的进程当前正在某一个调度器中执行代码。当进程进入 receive 时，如果消息队列中没有匹配的消息，进程将开始 _waiting_ ，直到消息到达或发生超时。如果一个进程用尽了它所有的规约值，它将变成  _runnable_ 状态，并等待调度程序再次将其拾取。接收到消息或超时的等待进程将变为 _runnable_ 的。

每当一个进程需要进行垃圾收集时，它就会进入 _garbing_ 状态，直到 GC 完成。在执行 GC 时，它将旧状态保存在 `gcstatus` 字段中，并在执行 GC 完成时将进程状态设置为使用保存的 `gcstatus` 旧状态。

_suspended_ 状态仅用于调试目的。您可以在一个进程上调用 `erlang:suspend_process/2` ，强制另一个进程进入挂起状态。每当一个进程在另一个进程上调用 `suspend_process` 时，挂起计数 ( _suspend count_ ) 就会增加。这被记录在字段 `rcount` 中。挂起的进程调用 `erlang:resume_process/1` 将减少挂起计数。处于挂起状态的进程将在挂起计数为零时离开挂起状态。

字段 `rstatus` (resume status) 用于跟踪进程在挂起之前的状态。如果它正在 _running_ 或 _runnable_ ，它将作为  _runnable_ 启动，如果它正在 _waiting_ 状态，它将返回到等待队列。如果一个挂起的等待进程接收到超时，则将 `rstatus` 设置为 _runnable_，因此它将恢复为 _runnable_。

为了跟踪下一个要运行的进程，调度器将进程保存在一个队列中。

=== 进程队列

调度器的主要工作是跟踪工作队列，工作队列即进程和端口 ( ports ) 的队列。

调度程序必须处理两种进程状态：_runnable_ 和 _waiting_。等待接收消息的进程处于 waiting 状态。当等待进程收到消息时，发送 ( send ) 操作将触发接收进程进入 runnable 状态。如果 receive 语句有超时，调度程序必须在超时被触发时，触发将进程状态变为 runnable 的转换。我们将在本章后面介绍这种机制。

==== Ready 队列

处于 runnable 状态的进程被放在由调度器处理的 FIFO (先入先出) 队列中，称为就绪队列 ( _ready queue_ )。队列由第一个和最后一个指针以及每个参与进程 PCB 中的下一个指针实现。当一个新进程被添加到队列中时，该进程将跟随最后一个指针，并被添加到队列的末尾，时间复杂度为 O(1)。当调度一个新的进程时，该进程从队列的头部 (第一个指针) 弹出。

[[the_ready_queue]]
----
 The Ready Queue

 First: -->  P5       +---> P3       +-+-> P17
             next: ---+     next: ---+ |  next: NULL
                                       |
 Last: --------------------------------+
----

在有多个调度器线程的 SMP 系统中，每个调度器有一个队列。

[[the_smp_ready_queues]]
----
 Scheduler 1       Scheduler 2      Scheduler 3      Scheduler 4

 Ready: P5         Ready: P1        Ready: P7        Ready: P9
        P3                P4               P12
        P17                                P10

----

实际情况稍微复杂一些，因为 Erlang 进程有优先级。每个调度器实际上有三个队列。一个队列用于最大优先级 ( _max priority_ ) 任务，一个用于高优先级 ( _high priority_ ) 任务，还有一个队列同时包含普通和低优先级 ( _normal_ 和 _low priority_ ) 任务。

[[priority_ready_queues]]
----
 Scheduler 1       Scheduler 2      Scheduler 3      Scheduler 4

 Max:    P5        Max:             Max:             Max:
 High:             High:  P1        High:            High:
 Normal: P3        Ready: P4        Ready: P7        Ready: P9
         P17                               P12
                                           P10
----

如果在最大优先级队列中有任何进程，调度器将选择这些进程执行。如果最大优先级队列中没有进程，但高优先级队列中有进程，调度器将选择这些进程。只有当最大优先级队列和高优先级队列中没有进程时，调度器才会从普通和低优先级队列中选择第一个进程。

当一个普通进程被插入到队列中时，它的调度计数 ( _schedule count_ ) 为 1，而一个低优先级进程的调度计数为 8。当从队列前端挑选一个进程时，它的调度计数将减少 1，如果该计数达到 0，则该进程将被调度，否则它将被插入到队列的末尾。这意味着低优先级进程在被调度之前将经过队列 7 次。

==== Waiting, Timeouts and the Timing Wheel

尝试在空邮箱或没有匹配消息的邮箱上进行接收的进程，将会让步 ( yield ) 并进入 waiting 状态。

当消息被发送到收件箱时，发送进程将检查接收者是否在 waiting 状态睡眠 ( _sleeping_ )，在这种情况下，它将唤醒 ( _wake_ ) 进程，将其状态更改为 runable，并将其放在适当的就绪队列的末尾。

如果 receive 语句有一个 +timeout+ 子句，那么将为进程创建一个计时器，该计时器将在指定的超时时间之后触发。运行时系统对超时的唯一保证是：它不会在设置的时间之前触发，也就是说，它可能会在进程被调度并执行之前的预期时间之后一段时间被触发。

在 VM 中，计时器由一个计时器轮 ( _timing wheel_ ) 处理。也就是说，一个环形的时间槽数组。在 Erlang 18 之前，计时器轮是一个全局资源，如果有很多进程将计时器插入到计时器轮中，那么可能会争用写锁。如果使用多个定时器，请确保使用的是 Erlang 的新版本。

计时器轮的默认大小 ( TIW_SIZE ) 是 65536 个槽 ( 如果以small memory footprint构建的系统，则为8192个槽 )。当前时间由数组的索引 ( tiw_pos ) 表示。当超时时间为 T 计时器插入到轮中时，计时器被插入到位置为 ( tiw_pos + T ) % TIW_SIZE 的槽中。

[[the_timing_wheel]]
----

   0 1                                      65535
  +-+-+- ... +-+-+-+-+-+-+-+-+-+-+-+ ... +-+-----+
  | | |      | | | | | | |t| | | | |     | |     |
  +-+-+- ... +-+-+-+-+-+-+-+-+-+-+-+ ... +-+-----+
              ^           ^                       ^
              |           |                       |
           tiw_pos     tiw_pos+T               TIW_SIZE

----

存储在计时器轮中的计时器是一个指向 +ErlTimer+ 结构体的指针。参见 link:https://github.com/erlang/otp/blob/OTP-19.1/erts/emulator/beam/erl_time.h#L421[erl_time.h] (译注：该文件变动比较大，在 OTP-19.1 和 OTP-23.1 中有所不同，下文已附源码，请读者对比阅读)。如果多个定时器被插入到同一个插槽中 (译注：当超时时间相同时)，它们被 +prev+ 和 +next+ 字段链接在一个链表中。+count+ 字段被设置为 +T/TIW_SIZE+ 


[[ErlTimer]]
[source,c]
----

/*
** Timer entry:
*/
typedef struct erl_timer {
    struct erl_timer* next;	/* next entry tiw slot or chain */
    struct erl_timer* prev;	/* prev entry tiw slot or chain */
    Uint slot;			/* slot in timer wheel */
    Uint count;			/* number of loops remaining */
    int    active;		/* 1=activated, 0=deactivated */
    /* called when timeout */
    void (*timeout)(void*);
    /* called when cancel (may be NULL) */
    void (*cancel)(void*);
    void* arg;        /* argument to timeout/cancel procs */
} ErlTimer;

----

(译注：OTP-19.1 的 erl_timer 结构定义在 erl_time.h L421，其定义如下：)

[[ErlTimer-OTP-19.1]]

[source,c]
----

/*
** Timer entry:
*/
typedef struct erl_timer {
    struct erl_timer* next;	/* next entry tiw slot or chain */
    struct erl_timer* prev;	/* prev entry tiw slot or chain */
    union {
	struct {
	    void (*timeout)(void*); /* called when timeout */
	    void (*cancel)(void*);  /* called when cancel (may be NULL) */
	    void* arg;              /* argument to timeout/cancel procs */
	} func;
	ErtsThrPrgrLaterOp cleanup;
    } u;
    ErtsMonotonicTime timeout_pos; /* Timeout in absolute clock ticks */
    int slot;
} ErtsTWheelTimer;

----

(译注：OTP-23.1 的 erl_timer 结构定义在 erl_time.h L462，其定义如下：)
[[ErlTimer-OTP-23.1]]
[source,c]
----
/*
** Timer entry:
*/
typedef struct erl_timer {
    ErtsMonotonicTime timeout_pos; /* Timeout in absolute clock ticks */
    struct erl_timer* next;     /* next entry tiw slot or chain */
    struct erl_timer* prev;	/* prev entry tiw slot or chain */
    void (*timeout)(void*); /* called when timeout */
    void* arg;              /* argument to timeout/cancel procs */
    int slot;
} ErtsTWheelTimer;

----

=== 端口 ( Ports )

端口是 Erlang 中，对于与 Erlang 虚拟机外部的通信点的抽象。在 Erlang 中，与套接字、管道和文件 IO 的通信都是通过端口完成的。

与进程一样，端口是在与创建进程相同的调度程序上创建的。同样像进程一样，端口使用规约值来决定何时让步 ( yield )，他们也运行 4000 次规约值。但是由于端口不运行 Erlang 代码，所以没有 Erlang 函数调用来计算规约值，而是将每个端口任务 ( _port task_ ) 计算为减少的数量。目前，每个任务使用 200+ 的规约值，以及相对于传输数据的千分之一的规约值数量。

端口任务是端口上的一个操作，如打开、关闭、发送或接收数据。为了执行端口任务，正在执行的线程对端口进行锁定。

端口任务在调度器循环 (见下面 xref:SEC-Scheduler_loop[] ) 的每次迭代中，在选择要执行的新进程之前，被调度和执行。

=== 规约（可以跳过）

当进程被调度时，它将获得 `CONTEXT_REDS` (在 link:https://github.com/erlang/otp/blob/OTP-20.0/erts/emulator/beam/erl_vm.h[erl_vm.h] 中定义，目前是 4000) 定义的规约值。在使用尽它的规约值后，或者在执行增加它的规约值时，或者在收件箱中执行没有匹配消息的接收时，该进程将被挂起 ( suspended )，一个新的进程会被调度。

如果 VM 已经执行了 `INPUT_REDUCTIONS` 定义的规约值 (当前是 `2*CONTEXT_REDS`，也在 +erl_vm.h+ 中定义)，或者没有准备运行的进程，调度器将执行系统级活动。也就是检查 IO；我们稍后会详细说明。

规约是什么还没有完全定义，但至少每个函数调用都应该算作规约。当谈到 BIFs 和 NIFs 时，事情变得有点复杂。如果不使用规约值和让步 ( yield )，进程不应该能够运行“很长时间”。用 C 编写的函数不能在中间产生让步，用 C 编写函数的原因通常是为了获得性能收益。在这类函数中，规约可能需要更长的时间，这可能导致调度器中的不平衡。

例如，在 R16 之前的 Erlang 版本中，BIFs 的 `binary_to_term/1` 和 `term_to_binary/1` 是不让步的，并且只算一次规约。这意味着以特大项式 (为参数) 调用这些函数的进程可能会饿死其他进程。因为调度器之间的进程平衡方式，这种情况甚至可能发生在 SMP 系统中，我们很快就会讲到。

当进程运行时，仿真器在 (寄存器映射) 变量 `FCALLS` 中保留要执行的规约数 (参见 +beam_emu.c+)。

// I have compiled a table of variable names used for reduction counting
// as a reference for you if you want to dive into the source code. In
// xref:redvars[] you can see the variables used globally and in the PCB
// and in the emulator and the scheduler.

// [[redvars]]
// [cols="1,2a"]
// |====
// | Global

// |

// [cols="1,3"]
// !====
// ! Variable ! Use

// ! +function_calls+ ! static (file global) variable in erl_process.c, number of function calls since last system-level activity

// !====

// | In PCB

// |

// [cols="1,3"]
// !====
// ! Variable                         ! Use
// ! p->fcalls                        !
// ! p->reds                          !
// ! REDS_IN == (+p->def_arg_reg[5]+) ! reds while swapped out?

// !====

// | beam_emu.c

// |

// [cols="1,3"]
// !====
// ! Variable   ! Use
// ! FCALLS     ! register mapped var for reductions
// ! reds_used  ! used reductions during execution, calls in erl_process.c schedule
// ! reds (c_p->fcalls) !
// ! neg_o_reds ! ("negative old value of reds when call saving is active")
// !====

// | erl_process.c schedule/2

// |

// [cols="1,3"]
// !====
// ! Variable         ! Use
// ! calls            ! argument to schedule
// ! context_reds     !
// ! fcalls           !
// ! input_reductions !
// ! actual_reds      !
// ! reds             !
// !====

// |====

[[SEC-Scheduler_loop]]
=== 调度器循环（原书未完成）

从概念上讲，在 Erlang VM 中，可以看作是调度器来驱动程序执行的 。但实际上，在 C 代码中的结构是：模拟器 (beam_emu.c 中的 https://github.com/erlang/otp/blob/OTP-23.1/erts/emulator/beam/beam_emu.c#L482[+process_main+]) 驱动程序执行，它以子程序调用的方式调用调度器，来查找下一个要执行的进程。

不过，我们将假设它使用前一种模型，因为它为调度器循环提供了一个很好的概念模型。也就是说，我们将这个过程 _当做_ ：调度器选择一个要执行的进程，然后将执行过程移交给模拟器。

如果以概念模型来看，调度器循环看起来是：

- 更新规约值计数器
- 检查计时器
- 如果需要，校验平衡
- 如果需要，迁移进程和端口
- 进行调度器附加工作
- 如果需要，检查 IO ，更新时间
- 如果需要，选择要执行的端口任务
- 选择要执行的进程

[NOTE]

TODO: 扩展以上内容

=== 负载均衡

负载均衡器的当前策略是：在不超载任何 CPU 的情况下，使用尽可能少的调度器。其思想是，当进程共享相同的 CPU 时，您将通过更好的内存局部性获得更好的性能。

但是需要注意的是，调度器中的负载平衡是在调度器线程之间进行的，而不一定是在cpu或核心之间进行的。在启动运行时系统时，可以指定应该如何将调度器分配给核心。默认的行为是：由操作系统向核心分配调度器线程，但是您也可以选择将调度器绑定到核心。

负载均衡器假设每个核心上都运行一个调度器，因此将一个进程从过载的调度器移动到未被使用的调度器将为您提供更多并行处理能力。如果您已经改变了调度器分配给核心的方式，或者如果您的操作系统已经过载，或者调度器不擅长给多个核心分配线程，那么负载平衡实际上可能对您不利。

负载均衡器使用两种技术来平衡负载：任务窃取 ( _task stealing_ ) 和迁移 ( _migration_ )。任务窃取是在调度器每次把进程队列中的进程都执行完时 ( 译注：换言之，此时调度器已经无活可干了 ) 使用的，这种技术将导致工作负载在调度器之间更加分散。迁移更为复杂，它试图将负载压缩到适当数量的调度器。

==== 任务窃取 ( _task stealing_ )

当调度器在试图获取运行队列中的进程来调度时，如果队列为空，此时这个调度器将尝试从其他调度器那里窃取工作任务。

首先，调度器对自身进行锁定，以防止其他调度器试图窃取当前调度器的工作。然后检查是否有任何不活动的，以便它可以从中窃取任务的调度器。如果没有具有可窃取任务的非活动调度器，那么它将查看活动调度器，从 id 比自身更高的调度器开始，尝试寻找可窃取任务。

任务窃取每次查看一个调度器，并尝试窃取该调度程序中优先级最高的任务。因为这是每个调度器分别完成的，所以实际上可能会有更高优先级的可窃取任务在另一个调度器上，但不会被成功窃取。

任务窃取试图通过窃取具有较高 id 的调度器来将任务转移到具有较低 id 的调度程序，但由于窃取也会回绕并窃取具有较低 id 的调度器，结果是进程分散到所有活动调度器上。

任务窃取非常快，当调度器的任务执行完时，可以在调度器循环的每次迭代中完成。

==== 迁移

要真正最优地利用调度器，需要使用更精细的迁移策略。当前的策略是将负载压缩到尽可能少的调度器中，同时将其分散开来，以便没有调度器超载。

这是由 _erl_process.c_ 中的 https://github.com/erlang/otp/blob/OTP-23.1/erts/emulator/beam/erl_process.c#L4700[_check_balance_] (译注：这是个600行的大函数) 函数完成的：

迁移是这样完成的:首先设置一个迁移计划，然后让调度器在该计划上执行，直到一个新计划被设置。每减少 `2000*CONTEXT_REDS`，调度器就会查看所有调度器的工作负载，计算每个调度器上的每个优先级的迁移路径。迁移路径可以有三种不同类型的值：

1) 已清除 

2) 迁出到某调度器 

3) 从某调度器迁入

当一个进程进入 ready 队列 (例如，通过接收消息或触发超时) 时，通常会在它上次运行的调度器 (S1) 上调度它。如果该调度器 (S1) 在这个优先级队列的迁移路径被清除，那么 ( 在它上次运行的调度器 (S1) 上调度它 ) 就成立 。如果调度器 (S1) 的迁移路径被设置为迁出到 (S2)，那么如果 (S1) 和 (S2) 都具有不平衡的运行队列，那么进程将被移交给该调度器。详细说来：

当调度器 (S1) 选择要执行的新进程时，它会检查它是否有一个来自调度器 (S2) 的迁移路径。如果两个相关的调度器有不平衡的运行队列，调度器 (S1) 会从调度器 (S2) 偷取一个进程。

迁移路径的计算是通过比较每个调度器在某个优先级下的最大运行队列长度来达成的。每个调度器将在其调度器循环的每次迭代中更新一个计数器，以跟踪最大队列长度。然后该信息被用作计算平均 (最大) 队列长度 AMQL ( average (max) queue length )。

----
 Max
 Run Q
 Length
    5         o
              o
           o  o
Avg: 2.5 --------------
           o  o     o
    1      o  o     o

scheduler S1 S2 S3 S4
----

然后，调度器被按照它的最大队列长度排序。

----
 Max
 Run Q
 Length
    5               o
                    o
                 o  o
Avg: 2.5 --------------
              o  o  o
    1         o  o  o

scheduler S3 S4 S1 S2

           ^        ^
           |        |
          tix      fix
----

任何比平均队列长度长的最大运行队列 (S1, S2)，其调度器将被标记为移出，任何比平均队列长度短的最大运行队列 (S3, S4)，其调度器将被标记为迁入。

这是通过在有两个索引 ( 迁入 (fix) ) 和 ( 移出 (tix) ) 的有序的调度器集合做循环来实现的。在循环的每次迭代中，S[tix] 的迁移路径被设置为 S[fix]， S[fix] 的迁移路径被设置为 S[tix]。然后 tix 增加，fix减少，直到两者都超过平衡点。如果一个索引首先到达平衡点，它就会折返。

在示例中：

 * 迭代 1：S2.emigrate_to = S3 and S3.immigrate_from = S2
 * 迭代 2：S1.emigrate_to = S4 and S4.immigrate_from = S1

这样就做完了。

实际上，由于调度程序可以离线，所以事情要复杂一些。迁移计划只针对在线调度程序。此外，如前 ( 只讨论某一个优先级 ) 所述，真实的迁移过程每个优先级分别进行。

当一个进程要插入到一个就绪队列中，并且有一条从 S1 到 S2 的迁移路径时，调度器首先检查 S1 的运行队列是否大于平均队列长度，而 S2 的运行队列是否小于平均队列长度。这样，只有在两个队列仍然不平衡时才允许迁移。

但是有两个例外，即在队列已经达到平衡甚至以错误的方式不平衡时，还会进行强制迁移。在这两种情况下，都设置了一个特殊的疏散标志，该标志将覆盖平衡测试。

疏散标志在调度程序脱机时设置，以确保没有新进程在脱机调度程序上调度。当调度器检测到某个优先级没有进展时，也会设置该标志。也就是说，如果有一个最大优先级进程，它总是准备运行，所以没有正常的优先级进程被调度。然后，该调度器的正常优先级队列将被设置疏散标志。

译注：建议阅读材料：

- https://erlang.org/doc/apps/erts/ProcessManagementOptimizations.html