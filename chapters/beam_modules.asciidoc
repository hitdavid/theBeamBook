[[CH-beam_modules]]

== 模块和 BEAM 文件格式

[[modules]]

=== 模块

NOTE: TODO
什么是模块
如何加载代码
热代码加载是如何工作的
净化(purging)是如何工作的
代码服务器(code server) 是如何工作的
动态代码加载如何工作，代码搜索路径
在分布式系统中处理代码。(与第10章重叠，要看什么去哪里。)
参数化模块
p-mod是如何实现的
p-mod调用的技巧

以下是本手稿的一段摘录:

[[BEAM_files]]

=== BEAM 文件格式

关于 beam 文件格式的确切信息来源显然是 beam_lib.erl  (参见 link:$$https://github.com/erlang/otp/blob/maint/lib/stdlib/src/beam_lib.erl$$[])。实际上，还有一份由Beam的主要开发人员和维护人员编写的关于该格式的描述(参见 link:$$http://www.erlang.se/~bjorn/beam_file_format.html$$[])，可读性更好，但有些过时。

BEAM 文件格式基于交换文件格式 (interchange file format, EA IFF)#，有两个小的变化。我们将这些不久。IFF文件以文件头开始，后面跟着许多“块”。在IFF规范中有许多主要处理图像和音乐的标准块类型。但是IFF标准也允许您指定自己的命名块，而这正是 BEAM 所做的。

注意:Beam文件与标准IFF文件不同，因为每个块是在4字节边界 (即32位字)  上对齐的，而不是在IFF标准中在2字节边界上对齐的。为了表明这不是一个标准的 IFF 文件，IFF 头被标记为 “FOR1” 而不是 “FOR”。IFF 规范建议将此标记用于未来的扩展。

Beam 使用的 form type 值为：“Beam”。一个 Beam 文件头有以下布局:

[source,erlang]
----
BEAMHeader = <<
  IffHeader:4/unit:8 = "FOR1",
  Size:32/big,                  // big endian, how many more bytes are there
  FormType:4/unit:8 = "BEAM"
>>

----

在文件头之后可以找到多个块。每个块的大小与4字节的倍数对齐，并且(每个块)都有自己的块头部 (见下面描述)。

注意:对齐对于某些平台很重要，在这些平台中，对于未对齐的内存字节访问将产生一个硬件异常(在Linux中称为SIGBUS)。这可能导致性能下降，或者异常可能导致VM崩溃。

[source,erlang]
----
BEAMChunk = <<
  ChunkName:4/unit:8,           // "Code", "Atom", "StrT", "LitT", ...
  ChunkSize:32/big,
  ChunkData:ChunkSize/unit:8,   // data format is defined by ChunkName
  Padding4:0..3/unit:8

>>

----

该文件格式在所有区域前加上这个区域的大小，使得在从磁盘读取文件时可以很容易地直接解析文件。为了说明beam文件的结构和内容，我们将编写一个程序，它能从一个 beam 文件中提取所有数据块。为了使这个程序尽可能简单和可读，我们不会在读取时解析文件，而是将整个文件作为二进制文件加载到内存中，然后解析每个块。第一步是得到所有块的列表：

++++
<!-- While this is reasonably simple code, is it going to be obvious to readers what's going on here? It may require a bit of explanation as to how this code works. - bmacdonald -->
++++


[source,erlang]
----
include::../code/beam_modules_chapter/src/beamfile1.erl[]
----


一次样例运行结果可能是这样的：

----
> beamfile:read("beamfile.beam").
{848,
[{"Atom",103,
  <<0,0,0,14,4,102,111,114,49,4,114,101,97,100,4,102,105,
    108,101,9,114,101,97,...>>},
 {"Code",341,
  <<0,0,0,16,0,0,0,0,0,0,0,132,0,0,0,14,0,0,0,4,1,16,...>>},
 {"StrT",8,<<"FOR1BEAM">>},
 {"ImpT",88,<<0,0,0,7,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,7,...>>},
 {"ExpT",40,<<0,0,0,3,0,0,0,13,0,0,0,1,0,0,0,13,0,0,0,...>>},
 {"LocT",16,<<0,0,0,1,0,0,0,6,0,0,0,2,0,0,0,6>>},
 {"Attr",40,
  <<131,108,0,0,0,1,104,2,100,0,3,118,115,110,108,0,0,...>>},
 {"CInf",130,
  <<131,108,0,0,0,4,104,2,100,0,7,111,112,116,105,111,...>>},
 {"Abst",0,<<>>}]}

----

其中，我们可以看到 beam 使用的块名称。

[[atom_table_chunk]]

==== 原子表块

名为 `Atom` 或 `AtU8` 的数据块都是强制必须包含的。它包含了模块提到的所有原子。对于 `latin1` 编码的源文件，使用名为 `Atom` 的块。对于 `utf8` 编码的模块，块被命名为 `AtU8` 。atom 块的格式为：

[source,erlang]
----
AtomChunk = <<
  ChunkName:4/unit:8 = "Atom",
  ChunkSize:32/big,
  NumberOfAtoms:32/big,
  [<<AtomLength:8, AtomName:AtomLength/unit:8>> || repeat NumberOfAtoms],
  Padding4:0..3/unit:8
>>

----

AtU8块只有名称不同(为 `AtU8` )，其他同 atom 块。


NOTE: 模块名称永远存储在原子表的第一个位置 (atom index 0)。

让我们为原子块添加一个解码器到我们的 BEAM 文件读取器:

[source,erlang]
----
include::../code/beam_modules_chapter/src/beamfile2.erl[]
----

[[export_table_chunk]]

==== 导出表块

名为 `ExpT` (EXPort Table) 的块是强制必须包含的，它包含关于该模块要导出哪些函数的信息。

导出块的格式为：

[source,erlang]
----
ExportChunk = <<
  ChunkName:4/unit:8 = "ExpT",
  ChunkSize:32/big,
  ExportCount:32/big,
  [ << FunctionName:32/big,
       Arity:32/big,
       Label:32/big
    >> || repeat ExportCount ],
  Padding4:0..3/unit:8
>>

----

`FunctionName` 是原子表中的索引。

我们可以通过在原子处理子句之后添加以下子句来扩展 parse_chunk 函数：

[source,erlang]
----
parse_chunks([{"ExpT", _Size,
             <<_Numberofentries:32/integer, Exports/binary>>}
            | Rest], Acc) ->
   parse_chunks(Rest,[{exports,parse_exports(Exports)}|Acc]);

…

parse_exports(<<Function:32/integer,
               Arity:32/integer,
               Label:32/integer,
               Rest/binary>>) ->
   [{Function, Arity, Label} | parse_exports(Rest)];
parse_exports(<<>>) -> [].

----



[[import_table_chunk]]

==== 导入表块

名为 `ImpT` (IMPort Table) 的块是强制必须包含的，它包含关于模块要导入哪些函数的信息。

数据块的格式为：

[source,erlang]
----
ImportChunk = <<
  ChunkName:4/unit:8 = "ImpT",
  ChunkSize:32/big,
  ImportCount:32/big,
  [ << ModuleName:32/big,
       FunctionName:32/big,
       Arity:32/big
    >> || repeat ImportCount ],
  Padding4:0..3/unit:8
>>

----

这里的 `ModuleName` 和 `FunctionName` 是原子表中的索引。

NOTE: 解析导入表的代码与解析导出表的代码类似，但并不完全相同：两者都是 32 位整数的三元组，只是它们的含义不同。请参阅本章末尾的完整代码。

[[code_chunk]]

==== 代码块

名为 `Code` 的块是强制必须包含的，它包含了 beam 代码。块的格式如下：

[source,erlang]
----
ImportChunk = <<
  ChunkName:4/unit:8 = "Code",
  ChunkSize:32/big,
  SubSize:32/big,
  InstructionSet:32/big,        % Must match code version in the emulator
  OpcodeMax:32/big,
  LabelCount:32/big,
  FunctionCount:32/big,
  Code:(ChunkSize-SubSize)/binary,  % all remaining data
  Padding4:0..3/unit:8
>>

----

字段 `SubSize` 存储代码开始前的字数量。这使得在代码块中添加新的信息字段而不破坏旧的加载器成为可能。

`InstructionSet` 字段指示文件使用哪个版本的指令集。如果任何指令以不兼容的方式更改，版本号就会增加。

`OpcodeMax` 字段表示代码中使用的所有操作码的最大数量。即使新指令被添加到系统中，只要文件中使用的指令在加载器知道的范围内，旧的加载器仍然可以加载新文件。

字段 `LabelCount` 包含标签的数量，以便加载器可以通过一次调用就将标签表按照正确的大小预分配好。字段 `FunctionCount` 包含函数的数量，这样函数表也可以有效地预分配空间。

`Code` 字段包含连接在一起的指令，其中每个指令有以下格式：

[source,erlang]
----
Instruction = <<
  InstructionCode:8,
  [beam_asm:encode(Argument) || repeat Arity]
>>
----

这里， `Arity` 硬编码在表格中，当模拟器从源码构造 beam 码时，表格是由 genop 脚本的 ops.tab 生成的。(译注：此处如果不能够理解，可以参考 xref:CH-Beam_loader[])

由 `beam_asm:encode` 产生的编码在下面的 <<SEC-BeamModulesCTE，紧凑的项式编码>> 节中进行了解释。

我们可以通过在程序中添加以下代码来解析代码块：

[source,erlang]
----
parse_chunks([{"Code", Size, <<SubSize:32/integer,Chunk/binary>>           
              } | Rest], Acc) ->
   <<Info:SubSize/binary, Code/binary>> = Chunk,
   %% 8 is size of CunkSize & SubSize
   OpcodeSize = Size - SubSize - 8,
   <<OpCodes:OpcodeSize/binary, _Align/binary>> = Code,
   parse_chunks(Rest,[{code,parse_code_info(Info), OpCodes}  
                      | Acc]);

..

parse_code_info(<<Instructionset:32/integer,
		  OpcodeMax:32/integer,
		  NumberOfLabels:32/integer,
		  NumberOfFunctions:32/integer,
		  Rest/binary>>) ->
   [{instructionset, Instructionset},
    {opcodemax, OpcodeMax},
    {numberoflabels, NumberOfLabels},
    {numberofFunctions, NumberOfFunctions} |
    case Rest of
	 <<>> -> [];
	 _ -> [{newinfo, Rest}]
    end].

----



我们将在后面的章节中( xref:beam_instructions[] )学习如何解码 beam 指令。

==== 字符串表块

名为 `StrT` 的块是强制的，它包含模块中的所有常量字符串，并作为一个长字符串。如果模块中没有字符串字面量，块应该仍然存在，但为空且大小为0。

数据块的格式为：

[source,erlang]
----
StringChunk = <<
  ChunkName:4/unit:8 = "StrT",
  ChunkSize:32/big,
  Data:ChunkSize/binary,
  Padding4:0..3/unit:8
>>

----

字符串块可以很容易地解析，只需将字符串字节转换为二进制 (binary)：

----
parse_chunks([{"StrT", _Size, <<Strings/binary>>} | Rest], Acc) -> 
    parse_chunks(Rest,[{strings,binary_to_list(Strings)}|Acc]); 
----

==== 属性块

名为 `Attr` 的数据块是可选的，但一些 OTP 工具希望属性块存在。发布处理程序期望 "vsn" 属性存在。您可以通过: beam_lib:version(Filename) 从文件中获得 version 属性，该函数假设存在一个属性块，其中包含一个 "vsn" 属性。

属性块的格式为:


[source,erlang]
----
AttributesChunk = <<
  ChunkName:4/unit:8 = "Attr",
  ChunkSize:32/big,
  Attributes:ChunkSize/binary,
  Padding4:0..3/unit:8
>>

----


我们可以使用如下方法解析属性块：


[source,erlang]
----
parse_chunks([{"Attr", Size, Chunk} | Rest], Acc) ->
    <<Bin:Size/binary, _Pad/binary>> = Chunk,
    Attribs = binary_to_term(Bin),
    parse_chunks(Rest,[{attributes,Attribs}|Acc]);
----

==== 编译信息块

名为 `CInf` 的数据块是可选的，但一些 OTP 工具希望编译信息块存在。

编译信息块的格式为：


[source,erlang]
----
CompilationInfoChunk = <<
  ChunkName:4/unit:8 = "CInf",
  ChunkSize:32/big,
  Data:ChunkSize/binary,
  Padding4:0..3/unit:8
>>

----

我们可以像这样解析编译信息块：


[source,erlang]
----
parse_chunks([{"CInf", Size, Chunk} | Rest], Acc) ->
    <<Bin:Size/binary, _Pad/binary>> = Chunk,
    CInfo = binary_to_term(Bin),
    parse_chunks(Rest,[{compile_info,CInfo}|Acc]);
----

==== 局部函数表块

名为 `LocT` 的块是可选的，用于交叉引用工具。

局部函数表块的格式与导出表相同：


[source,erlang]
----
LocalFunTableChunk = <<
  ChunkName:4/unit:8 = "LocT",
  ChunkSize:32/big,
  FunctionCount:32/big,
  [ << FunctionName:32/big,
       Arity:32/big,
       Label:32/big
    >> || repeat FunctionCount ],
  Padding4:0..3/unit:8
>>

----

NOTE: 解析本地函数表的代码与解析导出和导入表的代码基本相同，实际上我们可以使用相同的函数来解析所有表中的条目。请参阅本章末尾的完整代码。

==== 文字表块

名为 `LitT` 的块是可选的，它以压缩形式包含来自模块源文件的所有文字值，这些文字值不是即时(immediate) 值。块的格式为：


[source,erlang]
----
LiteralTableChunk = <<
  ChunkName:4/unit:8 = "LitT",
  ChunkSize:32/big,
  UncompressedSize:32/big,      % It is nice to know the size to allocate some memory
  CompressedLiterals:ChunkSize/binary,
  Padding4:0..3/unit:8
>>

----

其中 `压缩文字` (`CompressedLiterals`) 必须有精确的 `非压缩大小` (`UncompressedSize`) 字节。表中的每个文字都用外部项式格式  (`erlang:term_to_binary`) 编码。 `CompressedLiterals` 的格式如下：

----
CompressedLiterals = <<
  Count:32/big,
  [ <<Size:32/big, Literal:binary>>  || repeat Count ]

>>
----

整个表用 `zlib:compress/1` 压缩，也可以用 `zlib:uncompress/1` 解压缩。

我们可以这样解析块：

[source,erlang]
----
parse_chunks([{"LitT", _ChunkSize,
              <<_CompressedTableSize:32, Compressed/binary>>}
             | Rest], Acc) ->
    <<_NumLiterals:32,Table/binary>> = zlib:uncompress(Compressed),
    Literals = parse_literals(Table),
    parse_chunks(Rest,[{literals,Literals}|Acc]);
----



...

[source,erlang]
----
parse_literals(<<Size:32,Literal:Size/binary,Tail/binary>>) ->
    [binary_to_term(Literal) | parse_literals(Tail)];
parse_literals(<<>>) -> [].
----





==== 抽象代码块

名为 `Abst` 的块是可选的，可以以抽象形式包含代码。如果将 `debug_info` 标记给编译器，它将在此块中存储模块的抽象语法树。像 debugger 和 Xref 这样的 OTP 工具需要抽象代码块。数据块的格式为：

[source,erlang]
----
AbstractCodeChunk = <<
  ChunkName:4/unit:8 = "Abst",
  ChunkSize:32/big,
  AbstractCode:ChunkSize/binary,
  Padding4:0..3/unit:8
>>

----

我们可以这样解析块：

[source,erlang]
----
parse_chunks([{"Abst", _ChunkSize, <<>>} | Rest], Acc) ->
    parse_chunks(Rest,Acc);
parse_chunks([{"Abst", _ChunkSize, <<AbstractCode/binary>>} | Rest], Acc) ->
    parse_chunks(Rest,[{abstract_code,binary_to_term(AbstractCode)}|Acc]);
----









==== 压缩和加密（原书未完成）

未完成



==== 函数跟踪块 (已过时)

函数跟踪块(Function Trace chuck) 类型目前已经过时了。


==== 整合回顾（原书未完成）

未完成



[[SEC-BeamModulesCTE]]

==== 紧凑的项式编码

让我们看看 `beam_asm:encode` 时使用的算法。BEAM 文件以一种节省空间的方式使用一种特殊编码在 BEAM 文件中存储简单的项式。它不同于 VM 所使用的内存项式布局。

TIP: `Beam_asm` 是 `compiler` 应用程序中的一个模块，它是Erlang发行版的一部分，用于组装 beam 模块的二进制内容。

这种复杂设计背后的原因是：试图在第一个字节中放入尽可能多的类型和值数据，以使代码段更紧凑。解码后,所有编码值成为全尺寸机器字或项式。

[ditaa]
----
7 6 5 4 3 | 2 1 0
----------+-------+
          | 0 0 0 | Literal         (tag_u in beam_opcodes.hrl)
          | 0 0 1 | Integer         (tag_i)
          | 0 1 0 | Atom            (tag_a)
          | 0 1 1 | X Register      (tag_x)
          | 1 0 0 | Y Register      (tag_y)
          | 1 0 1 | Label           (tag_f)
          | 1 1 0 | Character       (tag_h)
0 0 0 1 0 | 1 1 1 | Extended - Float
0 0 1 0 0 | 1 1 1 | Extended - List
0 0 1 1 0 | 1 1 1 | Extended - Floating point register
0 1 0 0 0 | 1 1 1 | Extended - Allocation list
0 1 0 1 0 | 1 1 1 | Extended - Literal

----

NOTE: 自OTP 20 以来，这个标签格式已经改变， `Extended - Float` 消失了。下面所有的标签值向下移动1: List 是 2#10111，fpreg 是 2#100111，alloc List 是 2#110111，literal 是 2#1010111。浮点值现在直接进入 BEAM 文件的文字区域 (literal area)。

它使用第一个字节的前3位来存储定义以下值类型的标记。如果这些位都是1 (特殊值7或  `beam_opcodes.hrl` 中的 ?tag_z)，那么会使用更多的位。

对于16以下的值，将值完全置于4-5-6-7位中，并将位3设为0：

[ditaa]
----
7 6 5 4 | 3 | 2 1 0
--------+---+------
Value   | 0 | Tag
----

对于 2048 (16#800) 以下的值，3 位被设置为 1，表示将使用 1 个延续字节，并且值的 3 个最有效 (significant) 位将扩展到这个字节的 5-6-7 位:

[ditaa]
----
7 6 5 | 4 3 | 2 1 0
------+-----+------
Value | 0 1 | Tag
----

较大的值和负值首先被转换为字节。如果值需要 2 到 8 个字节，3-4 位将被设置为 1，5-6-7 位将包含值的 (bytes -2) 大小，如下：

[ditaa]
----
7  6  5 | 4 3 | 2 1 0
--------+-----+------
Bytes-2 | 1 1 | Tag
----

如果下面的值大于 8 字节，那么所有的位 3-4-5-6-7 将被设置为1，后面跟着一个嵌套的编码无符号文字( `beam_opcodes.hrl` 中的宏  `?tag_u`  ) 值为 (Bytes-9):8，接下来是数据字节：

[ditaa]
----
7 6 5 4 3 | 2 1 0  ||	 Followed by a 		||
----------+------  ||	nested encoded literal	||  Data . . .
1 1 1 1 1 | Tag    ||	(Size - 9)		||
----

===== 标签类型

当读取压缩项式格式时，根据 `Tag` 的值可能会对结果整数进行不同的解释。

* 对于文字值，值是到文字表的索引。
* 对于原子，值为原子索引数 *减* 1。如果值为0，则表示 `NIL` (空列表)。
* 标签 0 表示无效值。
* 如果标记为字符，则值为无符号 unicode 码点。
* 标签扩展列表包含项式对。读取 `Size`，创建  `Size`  的元组，然后能读取到  `Size/2`  个项式对。每一对分别是 `Value` and `Label` 。其中 `Value` 是用来进行比较的项式， `Label` 是用来进行匹配的。这在 `select_val` 指令中使用。

请参考编译器应用程序中的 `beam_asm:encode/2` ，以了解更多关于如何进行编码的细节。标签值在本节中给出，但也可以在  `compiler/src/beam_opcodes.hrl` 中找到。