[[CH-Instructions]]
== 通用 BEAM 指令集

Beam 有两种不同的指令集，一种是内部指令集，称为 _specific_ 特殊指令集，另一种是外部指令集，称为 _generic_ 通用指令集。

通用指令集可以被称为官方指令集，这也是编译器和 Beam 解释器都使用的指令集。如果有一个官方的 Erlang 虚拟机规范，它会指定这个指令集为官方指令集。如果你想编写自己的运行在 Beam 的程序编译器，这是你应该生成的目标指令集。如果您想编写自己的 EVM，这是您应该处理的指令集。

外部指令集非常稳定，但是在 Erlang 版本之间，特别是在主要版本之间，它也会发生变化。

这是我们将在本章中介绍的指令集。

另一个指令集 (specific) 是 Beam 用来实现外部指令集的优化指令集。为了让你理解 Beam 是如何工作的，我们将在 xref:CH-Internal_instructions[] 中介绍这个指令集。内部指令集可以在次要版本之间甚至在补丁版本之间更改而不发出警告。任何基于内部指令集的工具都是有风险的。

在这一章中，我将详细介绍这些指令的一般语法和一些指令组，xref:AP-Instructions[] 中有一个完整的带有简短描述的指令列表。

=== 指令定义

通用指令的名称和操作码在 +lib/compiler/src/genop.tab+ 中被定义。

该文件包含 Beam 指令格式的版本号，该版本号也被写入 +.beam+ 文件中。这个数字到目前为止没有改变，仍然是版本0。如果外部格式将以非向后兼容的方式更改，则此数字将更改。

+beam_makeops+ 是一个从 ops tabs 生成代码的 perl 脚本，它使用 genop.tab 作为输入。生成器在为编译器生成 Erlang 代码 (beam_opcodes.hrl 和 beam_opcodes.erl)的同时，也为仿真器生成C代码(TODO: 是什么？？)。

文件中任何以 "#" 开头的行都是注释，会被 +beam_makeops+ 忽略。该文件可以包含以下形式的定义，这些定义在perl脚本中转换为绑定：

 NAME=EXPR

例如：

----
BEAM_FORMAT_NUMBER=0
----
“Beam 格式编号”与”外部 Beam 格式“中的 +instructionset+ 字段相同。只有在对指令集进行向后不兼容的更改时才会发生改变。

文件的主要内容是如下形式的操作码定义：

----
OPNUM: [-]NAME/ARITY
----
OPNUM 和 ARITY 是整数，NAME 是一个以小写字母(a-z) 开头的标识符，而 ":"，"-" 和 "/" 是文字值 ( literals )。

例如:

----
1: label/1
----

负号 (-) 表示已经弃用而不建议使用的函数。已弃用的函数保留其操作码，以便加载器能够向后兼容 (它将识别已弃用的指令并拒绝加载代码)。

在本章的其余部分，我们将详细介绍一些 BEAM 指令。完整的列表和简要描述见：xref:AP-Instructions[] 。

=== BEAM 代码清单

正如我们在 xref:CH-Compiler[] 中看到的那样，我们可以向 Erlang 编译器提供选项 'S'，以人为和机器可读的格式(实际上是以 Erlang 项式的形式) 获取带有模块 BEAM 代码的 +.S+ 文件。

给定文件 beamexample1.erl：

[source,erlang]
----
-module(beamexample1).

-export([id/1]).

id(I) when is_integer(I) -> I.
----

当用 erlc -S beamexample 编译时。我们得到了下面的 beamexmaple.S 文件:

[source,erlang]
----
{module, beamexample1}.  %% version = 0

{exports, [{id,1},{module_info,0},{module_info,1}]}.

{attributes, []}.

{labels, 7}.


{function, id, 1, 2}.
  {label,1}.
    {line,[{location,"beamexample1.erl",5}]}.
    {func_info,{atom,beamexample1},{atom,id},1}.
  {label,2}.
    {test,is_integer,{f,1},[{x,0}]}.
    return.


{function, module_info, 0, 4}.
  {label,3}.
    {line,[]}.
    {func_info,{atom,beamexample1},{atom,module_info},0}.
  {label,4}.
    {move,{atom,beamexample1},{x,0}}.
    {line,[]}.
    {call_ext_only,1,{extfunc,erlang,get_module_info,1}}.


{function, module_info, 1, 6}.
  {label,5}.
    {line,[]}.
    {func_info,{atom,beamexample1},{atom,module_info},1}.
  {label,6}.
    {move,{x,0},{x,1}}.
    {move,{atom,beamexample1},{x,0}}.
    {line,[]}.
    {call_ext_only,2,{extfunc,erlang,get_module_info,2}}.
----

实际的 beam 代码中，除了 id/1 函数，我们也得到一些元指令。

第一行 +{module, beamexample1}. %% version = 0+ 告诉我们模块名称是"beamexample1"，指令集的版本号为 "0"。

然后我们得到一个导出函数的列表 "id/1, module_info/0, module_info/1"。我们可以看到，编译器向代码中添加了两个自动生成的函数。这两个函数只是通用模块信息 BIF ( erlang:module_info/1 和 erlang:module_info/2)的分派器，其中添加了模块的名称作为第一个参数。

行 {attributes, []} 列出了所有已定义的编译器属性，在我们的例子中没有。

然后我们知道在模块中只有不到 7 个标签，+{labels, 7}+ 这一行使得一次加载代码变得很容易。

最后一种元指令是格式为 +{function, Name, Arity, StartLabel}+ 的 +function+ 指令。正如我们在 +id/1+ 函数中看到的，开始标签实际上是函数代码中的第二个标签。

+{label, N}+ ”指令“ 实际上不是一条指令，它在加载时不会占用内存中的任何空间。它只是为代码中的位置提供一个本地名称(或数字)。每个 label 都标记块的开始，因为每个 label 都可能是跳转的潜在目标。

第一个标签 ( +{label,1}+ )之后的前两个指令实际上是为报错生成的代码，它添加行号、模块、函数和参数目信息，并抛出异常。即 +line+ 和 +func_info+ 指令。

在 +{label,2}+ 之后，指令 +{test,is_integer,{f,1},[{x,0}]}+ 才是函数的”肉“。test 指令测试它的参数 (在末尾的列表中，在本例中是变量{x,0}) 是否满足测试，在本例中是一个整数测试 (is_integer)。如果测试成功，则执行下一条指令 ( +return+ )。否则，函数将失败，并跳转到 label 1 (+{f,1}+)，也就是说，在 label 1 处继续执行，此时会抛出函数子句异常。

文件中的其他两个函数是自动生成的。如果我们查看第二个函数，则指令 +{move,{x,0},{x,1}}+ 将寄存器 x0 中的参数移动到第二个参数寄存器 x1 中。然后指令 +{move,{atom,beamexample1},{x,0}}+ 将模块名 atom 移动到第一个参数寄存器 x0。最后对 +erlang:get_module_info/2+  进行一个尾部调用 (+{call_ext_only,2,{extfunc,erlang,get_module_info,2}}+)。正如我们将在下一节中看到的，有几种不同的调用指令。

=== 调用 (call)

正如我们在 xref:CH-Calls[] 中看到的，Erlang 中有几种不同类型的调用。为了区分指令集中的本地调用和远程调用，远程调用的指令名中有 +_ext+。本地调用只有模块代码中的一个标签，而远程调用的目标形式为 +{extfunc, Module, Function, Arity}+。

为了区分普通(堆栈构建)调用和尾部递归调用，后者的名称中有 +_only+ 或者 +_last+ 。带 +_last+ 的变体还将尽可能多的释放由最后一个参数给出的堆栈槽。

还有一个 +call_fun Arity+ 指令，它调用寄存器  {x, Arity} 中存储的闭包。参数存储在 x0 到 {x, array -1} 中。

所有类型的调用指令的完整清单见 xref:AP-Instructions[]。

=== 栈 (堆) 管理

在 Beam 上的 Erlang 进程的栈和堆共享相同的内存区域，请参阅 xref:CH-Processes[] 和 xref:CH-Memory[] 以获得完整的讨论。堆栈向低地址增长，堆向高地址增长。如果新的空间需求超出堆栈当前可提供的空间，Beam 将执行垃圾收集。

**************************

叶函数 ( *A leaf function* ):: 叶函数是一个不调用任何其他函数的函数。

非叶函数 ( *A non leaf function* ):: 一个非叶函数是一个可以调用另一个函数的函数。

**************************

在进入非叶子函数时，CP指针 ( _continuation pointer_ ) 被保存在栈上，在退出时，它被从堆栈读回。这是由 +allocate+ 和 +deallocate+ 指令完成的，它们用于为当前指令设置和拆除栈帧。

叶函数的函数框架是这样的：

[source,erlang]
----
{function, Name, Arity, StartLabel}.
  {label,L1}.
    {func_info,{atom,Module},{atom,Name},Arity}.
  {label,L2}.
    ...
    return.
----

一个非叶函数的函数框架是这样的:

[source,erlang]
----
{function, Name, Arity, StartLabel}.
  {label,L1}.
    {func_info,{atom,Module},{atom,Name},Arity}.
  {label,L2}.
    {allocate,Need,Live}.

    ...
    call ...
    ...
    
    {deallocate,Need}.
    return.
----

指令 +allocate StackNeed Live+ 保存 CP 指针( continuation pointer ) ，并在栈上为 +StackNeed+ 分配额外空间。如果在分配期间需要GC，则需要保存 +Live+ 个 X 寄存器。例如，如果 +Live+ 是 2，那么寄存器 X0 和 X1 将被保存。

在栈上分配空间时，栈指针 (E) 将被减小。

.Allocate 1 0
[ditaa]
----
       Before           After
         | xxx |            | xxx |
    E -> | xxx |            | xxx |
         |     |            | ??? | caller save slot
           ...         E -> | CP  |
           ...                ...
 HTOP -> |     |    HTOP -> |     |
         | xxx |            | xxx |
----

所有类型的分配 ( allocate ) 和释放 ( deallocate ) 指令的完整清单见 xref:AP-Instructions[]。

=== 消息传递

用 beam 码发送信息非常直接。你只需要使用 +send+ 指令。注意尽管发送指令不带任何参数,它更像是一个函数调用。它假设参数 (目的地和消息) 在参数寄存器 X0 和 X1 中。消息也被从 X1 复制到 X0。

接收消息要稍微复杂一些，因为它既涉及带有模式匹配的选择性接收，又在函数体中引入一个 yield / resume 点。(还有一个特性可以使用 refs 最小化消息队列扫描，稍后将对此进行详细介绍。)

==== 最小接收循环

一个最小的接收循环，它接受任何消息并且没有超时 (例如：+receive _ -> ok end+ )，在 BEAM 代码中是这样的：



A minimal receive loop, which accepts any message and has no timeout
(e.g. +receive _ -> ok end+) looks like this in BEAM code:

[source,erlang]
----
  {label,2}.
    {wait,{f,1}}.
  {label,1}.
    {loop_rec,{f,2},{x,0}}.
    remove_message.
    {jump,{f,3}}.
  {label,2}.
    {wait,{f,1}}.
  {label,3}.
     ...
----

 +loop_rec L2 x0+ 指令首先检查消息队列中是否有消息。如果没有消息执行跳转到L2，在那里进程将被挂起等待消息到达。

如果消息队列中有消息，则 +loop_rec+ 指令还将该消息从 _m-buf_  移动到进程堆中。有关 m-buf 处理的详细信息，请参阅 xref:CH-Memory[] 和 xref:CH-Processes[]。

对于像 +receive _ -> ok end+ 这样的代码，我们接受任何消息，且不需要模式匹配，我们只需要执行一个  +remove_message+ 来从消息队列中将本消息与下一条消息分离。(它还消除了任何超时，稍后将详细介绍。)

==== 选择性接收循环

对于一个选择性接收，例如 +receive [] -> ok end+ ，我们将在消息队列循环检查队列中是否有匹配的消息。 

[source,erlang]
----
  {label,1}.
    {loop_rec,{f,3},{x,0}}.
    {test,is_nil,{f,2},[{x,0}]}.
    remove_message.
    {jump,{f,4}}.
  {label,2}.
    {loop_rec_end,{f,1}}.
  {label,3}.
    {wait,{f,1}}.
  {label,4}.
    ...
----

在本例中，如果邮箱中有消息，我们在 loop_rec 指令之后对 Nil 执行模式匹配。如果消息不匹配，我们会在 L3 结束，其中  +loop_rec_end+ 指令将保存指针指向到下一个消息 (+p->msg.save =
&(*p->msg.save)->next+) ，并跳转回 L2。

如果消息队列中没有更多消息，则进程将被位于 L4 的  +wait+  指令挂起，保存指针将指向消息队列的末尾。当进程被重新调度时，它将只查看消息队列中的新消息 (保存点之后)。

==== 带超时的接收循环

如果我们向选择性接收添加一个超时，那么 wait 指令将被一个 wait_timeout 指令取代，后面跟着一个超时指令和超时之后要执行的代码。

[source,erlang]
----
  {label,1}.
    {loop_rec,{f,3},{x,0}}.
    {test,is_nil,{f,2},[{x,0}]}.
    remove_message.
    {jump,{f,4}}.
  {label,2}.
    {loop_rec_end,{f,1}}.
  {label,3}.
    {wait_timeout,{f,1},{integer,1000}}.
    timeout.
  {label,4}.
    ...
----

+wait_timeout+ 指令用给定的时间 (在我们的示例中是 1000 毫秒) 设置一个超时计时器，它还在 +p->def_arg_reg[0]+ 保存了下一条指令的地址 ( +timeout+ )，然后当计时器被设置后，将 +p->i+ 设置为指向 def_arg_reg。

这意味着当进程挂起时，如果没有匹配的消息到达，1 秒后超时将被触发，进程将在超时指令处继续执行指令。

注意，如果邮箱中接收到不匹配的消息，进程将被调度执行，并将在接收循环中运行模式匹配代码，但不会取消超时。因为超时计时器的取消是在 +remove_message+ 中执行的。

超时指令将邮箱的保存点重置为队列中的第一个元素，并从 PCB 中清除超时标志 (F_TIMO)。

==== 同步调用的技巧 ( Ref Trick )

现在我们已经到了接收循环的最后一个版本，我们使用前面提到的 ref 技巧来避免长信箱扫描。

Erlang 代码中的一种常见模式是实现一种远程调用  "remote call" ，在两个进程之间进行消息的发送和接收。例如 gen_server 中就是这样用的。这种代码通常隐藏在一个用普通函数调用包装过的库之后。例如，你调用函数 +counter:increment(Counter)+ ，在这个场景的背后，它变成了类似 +Counter ! {self(), inc}, receive {Counter, Count} -> Count end+。

这通常是封装进程中状态的很好的抽象。不过，当调用进程的邮箱中有许多消息时，会出现一个小问题。在这种情况下，receive 必须检查邮箱中的每条消息，以确定除最后一条消息外没有任何消息与返回消息匹配。

如果您的服务器接收了许多消息，并且对于每个消息执行了许多此类远程调用，那么这种情况经常会发生，如果没有适当的反压，服务器消息队列将被填满。

为了补救这个问题，在 ERTS 中有一个技巧可以识别这个模式，并避免扫描整个消息队列来寻找返回消息。

编译器识别在接收中使用新创建的引用 (ref) 的代码 ( 参见 xref:ref_trick_code[])，并输出能避免长时间的收件箱扫描的代码，因为新的引用不可能已经在收件箱中。

[source,erlang]
----
  Ref = make_ref(),
  Counter ! {self(), inc, Ref},
  receive
    {Ref, Count} -> Count
  end.
----

这为我们提供了以下完整接收的框架，请参见 xref:ref_receive[]。

[source,erlang]
----
    {recv_mark,{f,3}}.
    {call_ext,0,{extfunc,erlang,make_ref,0}}.
    ...
    send.
    {recv_set,{f,3}}.
  {label,3}.
    {loop_rec,{f,5},{x,0}}.
    {test,is_tuple,{f,4},[{x,0}]}.
    ...
    {test,is_eq_exact,{f,4},[{x,1},{y,0}]}.
    ...
    remove_message.
    ...
    {jump,{f,6}}.
  {label,4}.
    {loop_rec_end,{f,3}}.
  {label,5}.
    {wait,{f,3}}.
  {label,6}.
----

+recv_mark+ 指令在  +msg.saved_last+ 中保存当前位置( +msg.last+ )，在 +msg.mark+ 中保存 label 地址。

+recv_set+ 指令检查 +msg.mark+ 是否指向下一条指令，如果指向下一条指令，将保存点 ( +msg.save+ ) 移动到创建 ref  (+msg.saved_last+) 之前收到的最后一条消息。如果 +msg.mark+ 无效 (即不等于 msg.save)，则指令不执行任何操作。