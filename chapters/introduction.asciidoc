[[introduction]]

== Erlang 运行时系统介绍

Erlang 运行时系统（ERTS） ((("Erlang RunTime System", see="ERTS")))(((ERTS))) 是一个有许多组件相互依赖的复杂系统。他使用了非常易于移植的方法编码，以便能够在从电脑棒到上TB内存的多核计算机上运行。为了能够为你的应用优化性能，你就不能只了解你的应用本身，同时需要深刻理解ERTS。



=== ERTS 和 Erlang 运行时系统

任何 Erlang 运行时系统 ((("Erlang Runtime System"))) 和 Erlang 运行时的特定实现系统有一点区别。由爱立信开发维护的 Erlang/OTP 是 Erlang 和 Erlang 运行时系统事实上的标准实现。在本书中，我将参考这个实现为 _ERTS_，将 _Erlang RunTime System_ 中 T 字母大写 (See xref:ERTS[] for a definition of OTP)。

Erlang 运行时系统或者 Erlang 虚拟机并没有一个官方定义。你可以想象这样一个理想的柏拉图式系统看起来就像是ERTS，并且移除了所有特定实现细节。不幸的是，这是一个循环定义，因为你需要了解通用定义以便能够鉴别一个特定实现细节。在Erlang 的世界里，我们通常比较务实而不去担心这些。

我们将尝试使用术语 _Erlang Runtime System_ 来指代 Erlang 运行时系统的一般的想法。反之，由 Ericsson 开发维护的特定实现被我们称为 Erlang 运行时系统或简称 ERTS.

*Note*  本书主要关于 ERTS，很小部分与通用 _Erlang Runtime System_ 相关。你可以假设我们一直在基于 Ericsson 的实现讨论问题，除非我们明确声明我们在讨论通用原则。

=== 如何阅读本书

在本书的 xref:P-Running[] 部分，我们将关注如何为你的应用调整运行时系统，以及分析和调试你的应用和运行时系统。为了真正了解如何如何调整系统，你也需要了解系统。在本书的 xref:P-ERTS[] 部分，你讲深入理解运行时系统的工作原理。


在接下来 xref:P-ERTS[] 的章节中，我们将深入系统的各个组件。即使你并没有对全部组件有全面的理解，只要基本清楚每个组件是什么，也能够顺利阅读这些章节。剩余的介绍章节将向你介绍足够的基础信息和词汇术语，是你能够随意在这些章节之间切换阅读。

如果你有充裕时间，建议首次阅读按照顺序进行。有关 Erlang 和 ERTS 的词汇术语都在它们首次出现时解释。这样就可以在对某个特定组件有疑问时，使用 Part I 作为参考性的后续反复阅读。

[[ERTS]]
=== ERTS

此处我们将对 ERTS 的主要组件以及一些词汇有一个概览，并在后续章节做更细节的描述。

==== Erlang 节点 (ERTS)

当你启动一个 Elixir / Erlang 应用或者系统，实际上你启动的是一个 Erlang 节点(((node)))。这个节点运行了 ERTS 以及虚拟机 BEAM（或者也可能是其他的 Erlang 实现(参见 xref:Other_Erlang_Implementations[])）

你的应用代码在 Erlang 节点上运行，节点的各层也同时对你的应用性能表现产生影响。我们来看一下组成节点的层次栈。这将帮你理解将你的系统运行在不同环境的选项。

使用OO的术语，可以说一个 Erlang 节点就是一个 Erlang 运行时系统类对象。在 Java 世界，等价的概念是 JVM 实例。

所有的 Elixir / Erlang 代码执行都在节点中完成。每个 Erlang 节点运行在一个操作系统进程中，在同一台计算机中可以同时运行多个 Erlang 节点。

根据 Erlang OTP 文档，一个节点实际上是一个命名的执行运行时系统。这样说来，如果你启动了 Elixir，但并没有通过命令行的以下开关来指定节点名字 `--name NAME@HOST` 或 `--sname NAME` (在 Erlang 运行时中是 `-name` 和 `-sname` )，你会启动一个运行时，但是不能叫节点。此时，函数 `Node.alive?`  (在 Erlang 中为 `is_alive()`) 返回 false。

----
$ iex
Erlang/OTP 19 [erts-8.1] [source-0567896] [64-bit] [smp:4:4]
              [async-threads:10] [hipe] [kernel-poll:false]

Interactive Elixir (1.4.0) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)> Node.alive?
false
iex(2)>
----

_运行时系统_ 这个术语的使用并不严格。即使你并没有命名一个节点，也可以取得它的名字。在 Elixir 中，使用`Node.list` 参数 `:this`, 在 Erlang 中调用 `nodes(this).`即可:

----
iex(2)> Node.list :this
[:nonode@nohost]
iex(3)>
----

本书中，我们将使用术语 _节点_ 来指代任何运行中的运行时实例，而不论它是否被命名。

==== 执行环境中的分层

你的程序（应用）是在一个或者多个节点上运行的，它的性能不只取决于你的应用程序代码，同时取决于在 ERTS 栈 （_ERTS stack_）中，你应用以下的各层。图 xref:the_erts_stack[] 中，你可以看到同一台计算机运行2个 Erlang 节点时的 ERTS 栈。

[[the_erts_stack]]
.ERTS Stack
[ditaa]
----

  Node1     Node2

 +------+  +------+
 | APP  |  | APP  |
 +------+  +------+
 | OTP  |  | OTP  |
 +------+  +------+
 | BEAM |  | BEAM |
 +------+  +------+
 | ERTS |  | ERTS |
 +------+--+------+
 |       OS       |
 +----------------+
 |    HW or VM    |
 +----------------+


----

如果你用 Elixir，栈中还会有其他的层次。

[[the_elixir_stack]]
.Elixir Stack
[ditaa]
----
   Node1     Node2

 +------+  +------+
 | APP  |  | APP  |
 +------+  +------+
 |Elixir|  |Elixir|
 +------+  +------+
 | OTP  |  | OTP  |
 +------+  +------+
 | BEAM |  | BEAM |
 +------+  +------+
 | ERTS |  | ERTS |
 +------+  +------+
 +----------------+
 |       OS       |
 +----------------+
 |    HW or VM    |
 +----------------+

----

我们来观察栈中各层，看你如何为应用程序调优各层。

栈的最底部是程序运行依赖的硬件。改善你应用程序运行性能的最简单的方法是使用更好的硬件。如果因为经济、物理条件约束或者处于对环境问题的担忧等原因阻碍你升级硬件，你可能需要开始探索栈中的更高层次。

选择硬件的2个最主要考量是：它是否是多核系统，它是32位系统还是64位系统。计算机是否多核以及它是32/64位系统决定了你能够使用何种 ERTS 版本。

向上第二层是操作系统层。ERTS 能够在大多数的 Windows 和 包含 Linux, VxWorks, FreeBSD, Solaris, 以及 Mac OS X 的 POSIX “兼容” 系统上运行。如今，大部分的 ERTS 开发工作都是在 Linux 和 OS X 上完成的，所以你可以在这些平台上 ERTS 会有最佳的性能表现。Ericsson 一直以来在许多内部项目中使用 Solaris 平台，多年以来 ERTS 在 Solaris 上一直被调优。视你的使用场景，你也可能在 Solaris 上获得最佳性能。操作系统的选型往往被性能需求之外的因素约束。如果你在构建一个嵌入式应用，你可能需要选择 Raspbian （译注：树莓派系统）或者 VxWork，如果你在构建一些面向终端用户或者客户端的应用，你可能必须使用 Windows。ERTS 的 Windows 版本目前从性能和维护等方面来看，可能并不是最佳的选择，因为它不是最高优先级工作。如果你想使用一个64位版本的 ERTS ，你必须同时选择64位硬件和64位操作系统。本书并不会涉及到很多特定操作系统相关的问题，绝大多数例子假设你是在 Linux 系统上运行。

向上第三层是 Erlang 运行时系统，或者说是 ERTS 层。本层和向上第四层 -- Erlang 虚拟机（BEAM）是本书的主要内容。

向上第五层 OTP(((OTP))) 提供了 Erlang 标准库支持。OTP的原始含义是 “开放电信平台”（_Open Telecom Platform_）,它包含了若干位构造类似电信交换等鲁棒的应用而提供构建模块的库（例如  `supervisor`, `gen_server` and `gen_tcp`）早期，这些随 ERTS 发布的其他标准库和 OTP 的含义是混杂的。现如今，大多数人将 OTP 和 Erlang 连用为 "Erlang/OTP" 指代 ERTS 以及由 Ericsson 发布的所有 Erlang 库。了解这些标准库并且清楚何时、如何使用它们可以极大地提高应用程序的性能。本书将不涉及任何关于标准库和OTP的细节，涉及这些方面书籍有很多。

如果你运行 Elixir 程序，第6层提供了 Elixir 环境和 Elixir 库。

最后，向上数第7层是你的应用程序以及其中使用的第三方库。应用层可以使用底层提供的所有功能。除了升级硬件，这也是你最容易实现应用性能优化的地方。在 xref:CH-Tracing[] 中介绍了一些诊断优化应用程序的提示和工具。在 xref:CH-Debugging[] 一章中，我们将了解如何找到应用崩溃的原因以及如何查找应用 bug。

有关如何构建运行 Erlang 节点的信息，请参见 xref:AP-BuildingERTS[] ，然后通过本书其余部分学习 Erlang 节点的组件知识。



==== 分布式

Erlang 语言设计者的一个关键洞见是：为了构造一个可以 24小时 * 7天 工作的系统，你需要能够处理硬件失败。所以你需要至少将你的系统部署在2台以上的物理机器上。在每台机器上启动 Erlang 节点后，节点之间互相连接，跨节点的进程可以相互通信，就好像它们运行在同一个节点一样。

[[a_distributed_application]]
.Distributed Applications
[ditaa]
----
   Node1     Node2      Node3     Node4

 +------+  +------+   +------+  +------+
 | APP  |  | APP  |   | APP  |  | APP  |
 +------+  +------+   +------+  +------+
 |Elixir|  |Elixir|   |Elixir|  |Elixir|
 +------+  +------+   +------+  +------+
 | OTP  |  | OTP  |   | OTP  |  | OTP  |
 +------+  +------+   +------+  +------+
 | BEAM |  | BEAM |   | BEAM |  | BEAM |
 +------+  +------+   +------+  +------+
 | ERTS |  | ERTS |   | ERTS |  | ERTS |
 +------+  +------+   +------+  +------+
 +----------------+   +----------------+
 |       OS       |   |       OS       |
 +----------------+   +----------------+
 |    HW or VM    |   |    HW or VM    |
 +----------------+   +----------------+
 +-------------------------------------+
 |               Network               |
 +-------------------------------------+

----

==== Erlang 编译器

Erlang 编译器负责将 Erlang 源代码从 .erl 文件编译为 BEAM 虚拟机代码。编译器本身就是使用 Erlang 编写的，它将自身编译为 BEAM 码，通常在运行的 Erlang 节点可用。为了引导运行时系统，包含编译器在内的数个预先编译好的 BEAM 文件都被放置在 bootstrap 目录。

有关编译器的更多信息可以参考 xref:CH-Compiler[]。

==== Erlang 虚拟机: BEAM

类似 JVM 是用来执行Java 代码的虚拟机一样，BEAM(((BEAM))) 是用来执行 Erlang 代码的虚拟机。BEAM 运行在 Erlang 节点上。

****
*BEAM:* BEAM这个名称最初代表  Bogdan's Erlang Abstract Machine，现在大多数人用它来指代 Björn’s Erlang Abstract Machine，Björn 是 Erlang 的现行维护者。

****

就像 ERTS 是 Erlang 运行时系统的更通用概念实现一样， BEAM 是 Erlang 虚拟机(EVM)(((Erlang Virtual Machine)))(((EVM, see="Erlang Virtual Machine"))) 的一个通用实现。虽然没有对 EVM 组成结构的定义，但是 BEAM 的指令实际上分2层，分别是通用指令和特定指令。通用指令集可以看作是 EVM 的蓝图。

对 BEAM 的全部描述可以参考 xref:CH-BEAM[], xref:CH-beam_modules[] 以及 xref:CH-Instructions[].

==== 进程

一个 Erlang 进程基本上与操作系统进程一样工作。每个进程拥有它自己的内存（mailbox, heap 和 stack）和带有进程信息的进程控制块（_process control block_ ,  PCB）

所有的 Erlang 代码执行均在进程上下文中完成。一个 Erlang 节点可以拥有分多进程，这些进程可以通过消息传递或信号通信，如果多个节点是连接的，Erlang 进程也可以与其他节点上的进程通信。

想了解更多关于进程和 PCB 的知识，请参考 xref:CH-Processes[].

==== 调度器

调度器负责选择某个 Erlang 进程执行。通常来讲，调度器有2个队列，1个是 _ready to run_ 的进程队列  _ready queue_ ，另一个是等待接受消息的进程队列 _waiting queue_ 。一个 _waiting queue_ 中的进程如果收到了消息，或者接收超时，将被移动到  _ready queue_ 。

调度器从  _ready queue_ 中拿到第一个进程，并将它放到 BEAM 中执行一个_时间片_( _time slice_)。当时间片耗尽，BEAM会剥夺这个进程的执行，并把它放到  _ready queue_ 的队尾。如果在时间片用尽前，这个进程被 receive 阻塞，他就会被放到  _waiting queue_ 中。

Erlang 天生支持并发，这意味着从概念上讲，每一个进程与其他的进程同时执行，但是事实上，只有1个进程在虚拟机中运行。在多核系统中，Erlang 运行多个调度器，通常每核心一个，每个调度器独有自己的队列。这样 Erlang 获得了真正的并行能力。为了利用多核能力， ERTS 必须使用_SMP_(((SMP))) 被构建 (参见 xref:AP-BuildingERTS[])。 SMP 意即_Symmetric MultiProcessing_，它意味着进程在多核中任意一个核心上运行的能力。

现实世界中，进程优先级等问题会使问题变得更复杂，等待队列使用时间轮实现。所有关于调度器的细节会在 xref:CH-Scheduling[]中描述。

==== Erlang 标签方案

Erlang 是一个动态类型语言，运行时系统需要跟踪所有的数据对象的类型，这是通过标签方案（tagging scheme）完成的。每一个数据对象或指向数据对象的指针同时也会有一个带有其对象数据类型的标签。

一般来说，指针的一些位（bits）会被为标签预留，通过查找对象的标签的位模式（bit pattern），仿真器就可以确定他的数据类型。

这些标签在模式匹配、类型检测、原始操作（primitive operations）和垃圾收集是被使用。

xref:CH-TypeSystem[] 中完整的描述了标签方案。

==== 内存处理

Erlang 使用了自动内存管理方案，使得程序员不必担忧内存的分配和回收。每个进程都有可以按需扩容和缩容的堆和栈。

当一个进程出现堆空间不足时，虚拟机会首先尝试通过垃圾回收的方法回收并分配内存。垃圾收集器接下来会找到该进程的栈和堆，并将其中的活动数据复制到一个新的堆中，这样就扔掉了所有死数据。如果做完这些堆空间还是不够用，一个新的更大的堆会被分配出来，活动数据也会被移动到新的堆中。

关于当前的代际复制垃圾收集器的细节，包含被引用计数的 binary 处理，可以在 xref:CH-Memory[] 章节中找到。

在使用 *HiPE* (High Performance *Erlang* ，译者注：类似 JIT ) 兼容本地代码的系统中，每个进程事实上有2个栈，1个 BEAM栈，1个本地代码栈，细节见 xref:CH-Native[] 。

==== 解释器和命令行接口

当你使用 +erl+ 启动 Erlang 节点，可以得到一个命令行提示符。这就是 _Erlang read eval print loop_ (REPL) 或者叫做 _command line
interface_ (CLI) 或简称 _Erlang shell_.

你可以在 Erlang 节点中输入并且在 shell 中直接执行。这种情况，代码不会被编译为 BEAM 码并被 BEAM执行，而是被 Erlang 解释器解析和解释执行。通常，解释后的代码与编译后的代码表现一致，但也存在一些差异，差异和其他方面的问题将在 xref:CH-Ops[] 介绍。

[[Other_Erlang_Implementations]]

=== 其他的 Erlang 实现

本书主要关注 Ericsson/OTP 实现的“标准” Erlang，即 ERTS。也有一些可用的其他 Erlang 实现，我们将在本节简要提及。

==== Erlang on Xen

Erlang on Xen (链接: http://erlangonxen.org[]，译注，网页已经没人维护) 是一个直接在服务器硬件上运行，中间没有操作系统层而只有一个 Xen 客户端薄层的 Erlang 实现。

这个运行在 Xen 上的虚拟机叫做 Ling，他同 BEAM 几乎100%二进制兼容。在 xref:the_eox_stack 中可以看到 Erlang 的 Xen 实现栈与 ERTS 的区别。需要注意的是，Xen 栈上的 Erlang 下没有操作系统。

Ling 实现了 BEAM 通用指令集，他可以重用 OTP 层的 BEAM 编译器来将 Erlang 编译成 Ling 代码。

[[erlang_on_xen]]
.Erlang On Xen

[ditaa]
----
  Node1     Node2       Node2     Node3

 +------+  +------+   +------+  +------+
 | APP  |  | APP  |   | APP  |  | APP  |
 +------+  +------+   +------+  +------+
 | OTP  |  | OTP  |   | OTP  |  | OTP  |
 +------+  +------+   +------+  +------+
 | Ling |  | Ling |   | BEAM |  | BEAM |
 +------+  +------+   +------+  +------+
 | EoX  |  | EoX  |   | ERTS |  | ERTS |
 +------+--+------+   +------+--+------+
 |      XEN       |   |       OS       |
 +----------------+   +----------------+
 |      HW        |   |    HW or VM    |
 +----------------+   +----------------+


----

==== Erjang

Erjang (链接: http://www.erjang.org[]，译注，项目已经废弃5年以上，最高支持Java 7) 是一个在 JVM 上运行的 Erlang 实现。它加载+.beam+ 文件后，将其重编译为 Java +.class+ 文件。他与 BEAM 几乎 100% 二进制兼容。

图 xref:the_erjang_stack 中可以看到 Erlang 的 Erjang 实现栈与 ERTS 的区别。需要注意的是，这个方案中 JVM 替代了 BEAM 作为虚拟机，Erjang 在虚拟机上使用 Java 实现 ERTS 提供的服务。

[[erlang_on_jvm]]
.Erlang on the JVM
[ditaa]
----
  Node1     Node2       Node3     Node4

 +------+  +------+   +------+  +------+
 | APP  |  | APP  |   | APP  |  | APP  |
 +------+  +------+   +------+  +------+
 | OTP  |  | OTP  |   | OTP  |  | OTP  |
 +------+  +------+   +------+  +------+
 |Erjang|  |Erjang|   | BEAM |  | BEAM |
 +------+  +------+   +------+  +------+
 | JVM  |  | JVM  |   | ERTS |  | ERTS |
 +------+--+------+   +------+--+------+
 |      OS        |   |       OS       |
 +----------------+   +----------------+
 |    HW or VM    |   |    HW or VM    |
 +----------------+   +----------------+


----

现在，你应该对 ERTS 的各主要部分有了基本的了解，也了解了继续深入各组件所必须的词汇术语。如果你渴望了解某一个具体的组件，现在就可以跳到对应章节阅读了。或者你需要找一个特定问题的解决方案，你可以跳到  xref:P-Running[] 章节，尝试使用各种方法来调优、调试你的系统。




